package org.simpleflatmapper.jdbc.test;

import org.junit.Test;
import org.simpleflatmapper.jdbc.Crud;
import org.simpleflatmapper.jdbc.DynamicJdbcMapper;
import org.simpleflatmapper.jdbc.JdbcMapper;
import org.simpleflatmapper.jdbc.JdbcMapperFactory;
import org.simpleflatmapper.map.property.AutoGeneratedProperty;
import org.simpleflatmapper.map.property.KeyProperty;
import org.simpleflatmapper.test.beans.DbObject;
import org.simpleflatmapper.test.jdbc.DbHelper;
import org.simpleflatmapper.util.CheckedConsumer;

import java.math.BigDecimal;
import java.net.InetAddress;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Iterator;
import java.util.UUID;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class PostgresqlMapperTest {

    @Test
    public void test530() throws SQLException {
        Connection connection = DbHelper.getDbConnection(DbHelper.TargetDB.POSTGRESQL);
        if (connection == null) { System.err.println("Db Postgresql not available"); return; }
        try {
            DynamicJdbcMapper<O530> mapper = JdbcMapperFactory.newInstance().newMapper(O530.class);
            Statement statement = connection.createStatement();
            try  {
                statement.execute("DROP TABLE IF EXISTS  o530 ");
                statement.execute("create TABLE o530 (  value double precision)");
                statement.execute("INSERT INTO o530(value) VALUES(3.14159)");


                ResultSet rs = statement.executeQuery("SELECT value from o530");
                try  {
                    Iterator<O530> iterator = mapper.iterator(rs);
                    O530 next = iterator.next();
                    
                    assertTrue(next.value instanceof Double);
                    assertEquals(3.14159, next.value.doubleValue(), 0.0000001);

                } finally {
                    rs.close();
                }

                JdbcMapper<O530> mapper2 = JdbcMapperFactory.newInstance()
                        .newBuilder(O530.class)
                        .addMapping("value")
                        .mapper();

                rs = statement.executeQuery("SELECT value from o530");
                try  {
                    Iterator<O530> iterator = mapper2.iterator(rs);
                    O530 next = iterator.next();

                    assertTrue(next.value instanceof BigDecimal);
                    assertEquals(3.14159, next.value.doubleValue(), 0.0000001);

                } finally {
                    rs.close();
                }
            } finally {
                statement.close();
            }

            
            


        } finally {
            connection.close();
        }
    }
    
    public static class O530 {
        public Number value;
    }
    @Test
    public void testBatchUpsertOnDb() throws SQLException {
        Connection connection = DbHelper.getDbConnection(DbHelper.TargetDB.POSTGRESQL);
        if (connection == null) { System.err.println("Db Postgresql not available"); return; }
        try {
            DynamicJdbcMapper<InetAndCidr> mapper = JdbcMapperFactory.newInstance().newMapper(InetAndCidr.class);
            DynamicJdbcMapper<InetAndCidrAsString> mapperStr = JdbcMapperFactory.newInstance().newMapper(InetAndCidrAsString.class);

            Statement statement = connection.createStatement();
            try  {
                statement.execute("DROP TABLE IF EXISTS  iac ");
                statement.execute("create TABLE iac (  field1 inet, field2 cidr)");
                statement.execute("INSERT INTO iac(field1, field2) VALUES('10.1.0.1', '10.1.0.0/22')");


                ResultSet rs = statement.executeQuery("SELECT field1, field2 from iac");
                try  {
                    Iterator<InetAndCidr> iterator = mapper.iterator(rs);
                    InetAndCidr next = iterator.next();
                    System.out.println("next = " + next);

                } finally {
                    rs.close();
                }
                rs = statement.executeQuery("SELECT field1, field2 from iac");
                try {
                    Iterator<InetAndCidrAsString> iteratorStr = mapperStr.iterator(rs);
                    InetAndCidrAsString inetAndCidrAsString = iteratorStr.next();
                    System.out.println("inetAndCidrAsString = " + inetAndCidrAsString);
                } finally {
                    rs.close();
                }
            } finally {
                statement.close();
            }



        } finally {
            connection.close();
        }
    }

    
    
    public static class InetAndCidr {
        public InetAddress field1;
        public Object field2;

        @Override
        public String toString() {
            return "InetAndCidr{" +
                    "field1=" + field1 +
                    ", field2=" + field2 +
                    '}';
        }
    }

    public static class InetAndCidrAsString {
        public String field1;
        public String field2;

        @Override
        public String toString() {
            return "InetAndCidrAsString{" +
                    "field1='" + field1 + '\'' +
                    ", field2='" + field2 + '\'' +
                    '}';
        }
    }

}