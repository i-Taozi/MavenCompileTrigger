/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.experienceindex.eclipse

import io.sarl.experienceindex.SarlExperienceIndex.SEI
import java.lang.ref.SoftReference
import java.text.MessageFormat
import org.eclipse.jface.dialogs.Dialog
import org.eclipse.jface.dialogs.IDialogConstants
import org.eclipse.jface.dialogs.IconAndMessageDialog
import org.eclipse.swt.SWT
import org.eclipse.swt.graphics.Color
import org.eclipse.swt.graphics.Font
import org.eclipse.swt.graphics.GC
import org.eclipse.swt.graphics.Image
import org.eclipse.swt.widgets.Composite
import org.eclipse.swt.widgets.Control
import org.eclipse.swt.widgets.Shell

/**
 * Dialog that shows the results for the SARL experience index.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.6
 */
class SarlExperienceIndexResultDialog extends IconAndMessageDialog {

	static val GLOBAL_ICON_SIZE = 256

	static val BACKGROUND_IMAGE = "icons/sei_background.png"

	static val ICON = "icons/sei.png"

	static val SEI_FONT = "arial"

	static val SEI_FONT_SIZE = 110

	static val SEI_FONT_STYLE = SWT::BOLD

	static val SEI_FONT_COLOR_RED = 94
	static val SEI_FONT_COLOR_GREEN = 105
	static val SEI_FONT_COLOR_BLUE = 114

	val sei : SEI

	var globalImage : SoftReference<Image>

	/** Construct the dialog.
	 *
	 * @param parentShell the parent shell.
	 * @param sei the Sarl experience index.
	 */
	new (parentShell : Shell, sei : SEI) {
		super(parentShell)
		this.sei = sei
		this.message = MessageFormat::format(
				Messages::SarlExperienceIndexResultDialog_0,
				sei.baseScore,
				sei.cpuScore,
				sei.memoryScore,
				sei.diskScore)
	}

	/**
	 * Opens a SEI dialog to display the results of the SEI computation.
	 *
	 * @param parent the parent shell of the dialog, or {@code null} if none.
	 * @param sei the Sarl experience index.
	 * @return the code of the button that was pressed that resulted in this
	 *         dialog closing. This will be {@link Dialog#OK} if the OK
	 *         button was pressed, or {@link Dialog#CANCEL} if this
	 *         dialog's close window decoration or the ESC key was used.
	 */
	static def open(parent : Shell, sei : SEI) : int {
		val dialog = new SarlExperienceIndexResultDialog(parent, sei)
		dialog.open
	}

	protected override createDialogArea(parent : Composite) : Control {
		var composite = super.createDialogArea(parent) as Composite
		composite.createMessageArea
		return composite
	}

	protected override getImage : Image {
		var img = this.globalImage?.get
		if (img === null) {
			var display = this.shell.display
			img = new Image(display, GLOBAL_ICON_SIZE, GLOBAL_ICON_SIZE)
			var gc = new GC(img)
			var backimg = SarlExperienceIndexPlugin::^default.getImage(BACKGROUND_IMAGE)
			gc.antialias = SWT::ON
			gc.drawImage(backimg, 0, 0)
			backimg.dispose
			gc.foreground = new Color(display, SEI_FONT_COLOR_RED, SEI_FONT_COLOR_GREEN, SEI_FONT_COLOR_BLUE)
			var newFont = new Font(display, SEI_FONT, SEI_FONT_SIZE, SEI_FONT_STYLE)
			gc.font = newFont
			var text = MessageFormat::format(Messages::SarlExperienceIndexResultDialog_1, this.sei.baseScore)
			var size = gc.textExtent(text)
			gc.drawText(text,
					(GLOBAL_ICON_SIZE - size.x) / 2,
					(GLOBAL_ICON_SIZE - size.y) / 2,
					SWT::DRAW_TRANSPARENT)
			newFont.dispose
			gc.dispose
			this.globalImage = new SoftReference(img)
		}
		return img
	}

	protected override configureShell(shell : Shell) {
		super.configureShell(shell)
		shell.text = Messages::SarlExperienceIndexResultDialog_2
		shell.setImage(SarlExperienceIndexPlugin.getDefault().getImage(ICON));
	}

	protected override createButtonsForButtonBar(parent : Composite) {
		createButton(parent, IDialogConstants::OK_ID, IDialogConstants::OK_LABEL, true)
	}
	
}
