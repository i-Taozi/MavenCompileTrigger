/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.network.tests.units.services

import com.google.inject.Injector
import com.hazelcast.collection.ISet
import com.hazelcast.core.HazelcastInstance
import com.hazelcast.map.IMap
import io.sarl.sre.network.services.HazelcastSpaceRepository
import io.sarl.sre.services.context.ContextService
import io.sarl.sre.services.context.SpaceRepository.SpaceDescription
import io.sarl.sre.tests.framework.SreTestUtilities
import io.sarl.sre.tests.framework.units.services.context.AbstractSpaceRepositoryTest
import io.sarl.tests.api.Nullable
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag

import static org.mockito.ArgumentMatchers.*

import static extension org.mockito.Mockito.*
import java.util.TreeMap
import io.sarl.lang.core.SpaceID

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@DisplayName("unit: HazelcastSpaceRepository test")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
@Tag("sre-network")
@SuppressWarnings("raw_type")
class HazelcastSpaceRepositoryTest extends AbstractSpaceRepositoryTest<HazelcastSpaceRepository, TreeMap<UUID, SpaceDescription>> {

	@Nullable
	var hazelcast : HazelcastInstance

	@Nullable
	var contextService : ContextService

	@Nullable
	var internalSet : ISet

	@Nullable
	var istructure : IMap<SpaceID, Object[]>

	@BeforeEach
	override setUp : void {
		this.istructure = typeof(IMap).mock
		//
		this.contextService = typeof(ContextService).mock
		//
		this.internalSet = typeof(ISet).mock
		//
		this.hazelcast = typeof(HazelcastInstance).mock
		when(this.hazelcast.getSet(anyString)).thenReturn(this.internalSet)
		when(this.hazelcast.getMap(anyString)).thenReturn(this.istructure)
		//
		super.setUp
	}

	protected def newSpaceRepository : HazelcastSpaceRepository {
		new HazelcastSpaceRepository(
			typeof(Injector).mock,
			this.executor,
			this.logger,
			this.configuration,
			this.specificationFactory,
			this.contextService,
			[SreTestUtilities::newFactories],
			this.hazelcast,
			this.internalStructure,
			this.istructure)
	}

	protected override newInternalStructure : TreeMap<UUID, SpaceDescription> {
		new TreeMap
	}
	
}
