/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.boot.internal.cli

import com.google.inject.AbstractModule
import com.google.inject.Module
import com.google.inject.Provides
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.bootique.log.BootLogger
import io.sarl.sre.SreVersion
import java.text.MessageFormat
import java.util.Collection
import javax.inject.Singleton

/**
 * Command for showing the SRE version.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class VersionCommand extends io.sarl.maven.bootiqueapp.version.VersionCommand {

	/** Constructor.
	 *
	 * @param bootLogger the logger.
	 */
	new (bootLogger : BootLogger) {
		super(bootLogger, typeof(VersionCommand), Messages::VersionCommand_0)
	}

	protected override getVersionMessage : String {
		val inheritedMessage = super.versionMessage
		return MessageFormat.format(Messages::VersionCommand_1,
				SreVersion::RELEASE_VERSION,
				SreVersion::IS_STABLE,
				inheritedMessage)
	}

}

/** Module for the command for printing out the SRE version.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class VersionCommandModule extends AbstractModule {

	override configure {
	}

	/** Provide the command for displaying the SRE version.
	 * 
	 * @param bootLogger the logger.
	 * @return the command.
	 */
	@Provides
	@Singleton
	def provideVersionCommand(bootLogger : BootLogger) : io.sarl.maven.bootiqueapp.version.VersionCommand {
		return new VersionCommand(bootLogger)
	}

}

/** Provider of the module for the version command.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class VersionCommandModuleProvider implements BQModuleProvider {

	override module : Module {
		return new VersionCommandModule
	}
	
	override overrides : Collection<Class<? extends Module>> {
		#[typeof(io.sarl.maven.bootiqueapp.version.VersionCommandModule)]
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule.builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::VersionCommandModuleProvider_0);
	}

}
