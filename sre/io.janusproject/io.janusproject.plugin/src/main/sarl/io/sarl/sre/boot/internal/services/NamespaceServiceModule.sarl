/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.internal.services

import com.google.common.util.concurrent.Service
import com.google.inject.AbstractModule
import com.google.inject.Module
import com.google.inject.Provides
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.sarl.api.naming.namespace.AnnotationFieldAccessValidator
import io.sarl.api.naming.namespace.CapacityFieldAccessValidator
import io.sarl.api.naming.namespace.CascadeFieldAccessValidator
import io.sarl.api.naming.namespace.FinderBasedNamespaceService
import io.sarl.api.naming.namespace.IFieldAccessValidator
import io.sarl.api.naming.namespace.INamespaceFinder
import io.sarl.api.naming.namespace.NamespaceService
import io.sarl.api.naming.namespace.OwnerTypeFieldAccessValidator
import io.sarl.api.naming.parser.INameParser
import java.util.Set
import javax.inject.Inject
import javax.inject.Singleton

import static extension com.google.inject.multibindings.Multibinder.*

/** 
 * Module for the namespace services.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class NamespaceServiceModule extends AbstractModule {

	protected override configure {
		typeof(NamespaceService).bind.to(typeof(InjectedFinderBasedNamespaceService)).in(typeof(Singleton))

		binder.newSetBinder(typeof(Service), typeof(SreServices)).addBinding.to(typeof(NamespaceService))
	}

	@Provides
	@Singleton
	def provideFieldAccessValidator : IFieldAccessValidator {
		val defaultValidator = new CascadeFieldAccessValidator
		defaultValidator.addValidator(new AnnotationFieldAccessValidator)
		defaultValidator.addValidator(new CapacityFieldAccessValidator)
		defaultValidator.addValidator(new OwnerTypeFieldAccessValidator)
		return defaultValidator
	}

}

/** 
 * Injectable implementation of the name space service.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class InjectedFinderBasedNamespaceService extends FinderBasedNamespaceService {

	@Inject
	def setNameParser(parser : INameParser) {
		super.setNameParser(parser)
	}

	@SuppressWarnings("raw_type")
	@Inject
	override setNamespaceFinders(@NamespaceFinders finders : Set<INamespaceFinder>) {
		super.setNamespaceFinders(finders)
	}

	@Inject
	override setFieldAccessValidator(validator : IFieldAccessValidator) {
		super.setFieldAccessValidator(validator)
	}

}

/** Provider of the module for the namespace services.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class NamespaceServiceModuleProvider implements BQModuleProvider {

	override module : Module {
		return new NamespaceServiceModule
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::NamespaceServiceModuleProvider_0)
	}

}

