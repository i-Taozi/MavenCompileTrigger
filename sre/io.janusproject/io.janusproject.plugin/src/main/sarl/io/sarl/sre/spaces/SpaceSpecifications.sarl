/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.spaces

import com.google.inject.Injector
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.EventSpaceSpecification
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.sre.KernelScope
import io.sarl.sre.services.logging.LoggingService
import javax.inject.Inject
import javax.inject.Provider
import javax.inject.Singleton

/** 
 * Abstract specification for standard event spaces into the SRE. 
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
abstract class AbstractSreEventSpaceSpecification {

	val injector : Injector

	val loggingService : LoggingService

	val spaceParticipantListenerFactory : SpaceParticipantListenerFactory

	val defaultSpace : OpenEventSpace

	/** Constructor.
	 * 
	 * @param injector the injector to use for creating the space.
	 * @param lockProvider the provider of synchronization locks.
	 * @param defaultSpace the default space.
	 * @param spaceParticipantListenerFactory the factory of listeners on space participant events.
	 * @param logger the logging service. 
	 */
	new (injector : Injector,
		defaultSpace : OpenEventSpace,
		spaceParticipantListenerFactory : SpaceParticipantListenerFactory,
		logger : LoggingService) {
		this.injector = injector;
		this.defaultSpace = defaultSpace
		this.spaceParticipantListenerFactory = spaceParticipantListenerFactory
		this.loggingService = logger
	}

	protected def createSpaceInstance(id : SpaceID, params : Object*) : OpenLocalEventSpace {
		val logger = this.loggingService.getKernelLogger
		val listener = this.spaceParticipantListenerFactory.create(this.defaultSpace, logger)
		val ^space = new OpenLocalEventSpace(id, listener, this.loggingService)
		if (this.defaultSpace === null) {//Only useful for the default space of the default context
			listener.defaultSpace = ^space;
		}
		this.injector.injectMembers(^space)
		return ^space
	}

}

/** 
 * Specification for standard event spaces into the SRE. 
 * 
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SreEventSpaceSpecification extends AbstractSreEventSpaceSpecification implements EventSpaceSpecification {

	def ^create(id : SpaceID, params : Object*) : EventSpace {
		id.createSpaceInstance(params)
	}

}

/** 
 * Event space specification related to the SRE. 
 * 
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SreOpenEventSpaceSpecification extends AbstractSreEventSpaceSpecification implements OpenEventSpaceSpecification {
	
	def ^create(id : SpaceID, params : Object*) : OpenEventSpace {
		id.createSpaceInstance(params)
	}

}

/** 
 * Factory of space specification for SRE. 
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
class SreSpaceSpecificationFactory {

	@Inject
	var injector : Injector

	@Inject
	@KernelScope
	var spaceParticipantListenerFactory : Provider<SpaceParticipantListenerFactory>

	@Inject
	var logger : Provider<LoggingService>

	/** Create the space specification for an event space that is supposed to be the default space.
	 * 
	 * @param type the type of the space specification.
	 * @param defaultSpace the instance of the default space.
	 * @return the specification.
	 */
	protected def newSpaceSpecification(type : Class<? extends SpaceSpecification<?>>, defaultSpace : OpenEventSpace) : SpaceSpecification<?> {
		assert type !== null
		if (type == typeof(OpenEventSpaceSpecification)) {
			return new SreOpenEventSpaceSpecification(this.injector, defaultSpace,
				this.spaceParticipantListenerFactory.get, this.logger.get)
		}
		if (type == typeof(EventSpaceSpecification)) {
			return new SreEventSpaceSpecification(this.injector, defaultSpace,
				this.spaceParticipantListenerFactory.get, this.logger.get)
		}
		return type.declaredConstructor.newInstance
	}

	/** Create the space specification for an event space that is supposed to be the default space.
	 *
	 * @param <S> the type of the space specification.
	 * @param type the type of the space specification.
	 * @return the specification.
	 */
	def createOpenEventSpaceSpecificationForDefaultSpace(type : Class<S>) : S with S extends SpaceSpecification<?> {
		val specification : SpaceSpecification<?> = type.newSpaceSpecification(null)
		return type.cast(specification)
	}

	/** Create the space specification for an event space that is supposed to be not the default space.
	 * 
	 * @param <S> the type of the space specification.
	 * @param type the type of the space specification.
	 * @param defaultSpace the default space of the context.
	 * @return the specification.
	 */
	def createOpenEventSpaceSpecificationInInnerContext(type : Class<S>, defaultSpace : OpenEventSpace) : S with S extends SpaceSpecification<?> {
		val specification : SpaceSpecification<?> = type.newSpaceSpecification(defaultSpace)
		return type.cast(specification)
	}

}
