/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.boot

import com.google.common.base.Throwables
import com.google.common.util.concurrent.Service
import com.google.inject.Injector
import com.google.inject.Module
import com.google.inject.ProvisionException
import io.bootique.BQRuntime
import io.bootique.Bootique
import io.sarl.api.bootiquebase.config.LogConfig
import io.sarl.bootstrap.SRE
import io.sarl.bootstrap.SREBootstrap
import io.sarl.bootstrap.SREListener
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.sre.Kernel
import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.boot.configs.subconfigs.BootConfig
import io.sarl.sre.boot.configs.subconfigs.RootContextType
import io.sarl.sre.services.lifecycle.KernelAgentLifecycleListener
import io.sarl.sre.services.lifecycle.LifecycleService
import io.sarl.sre.services.logging.LoggingService
import java.util.Arrays
import java.util.UUID
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicReference
import java.util.logging.Level
import java.util.logging.Logger
import java.util.regex.Pattern
import org.arakhne.afc.bootique.variables.VariableNames
import org.arakhne.afc.util.ListenerCollection
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.bootstrap.SRE.*

/** Class that implements the standard main function for running a SARL run-time environment
 * with bootique modules.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class SreMain implements SREBootstrap {

	static val BACKGROUND_SHUTDOWN_TIMEOUT = 20000

	static val D_PATTERN = "(?:(?:\\-\\-?)|(?:\\/))D([^=]+)=(.*)"

	val kernel = new AtomicReference<Kernel>

	@Accessors(PUBLIC_GETTER)
	var runtime : BQRuntime

	var bootType : RootContextType

	var userDefinedContextId : UUID

	var userDefinedSpaceId : UUID

	val listeners = new ListenerCollection<SREListener>
	
	@Accessors(PUBLIC_SETTER)
	var commandLineArguments : String[]

	private def addToCommandLineArguments(args : String[]) : String[] {
		if (args !== null && args.length > 0) {
			if (this.commandLineArguments !== null && this.commandLineArguments.length > 0) {
				val nargs = Arrays::copyOf(this.commandLineArguments, this.commandLineArguments.length + args.length)
				System::arraycopy(args, 0, nargs, this.commandLineArguments.length, args.length)
				return nargs
			}
			return args
		}
		if (this.commandLineArguments !== null && this.commandLineArguments.length > 0) {
			return this.commandLineArguments
		}
		return #[]
	}

	/** Replies the reference to the kernel.
	 *
	 * @return the reference to the kernel.
	 */
	def getKernel : Kernel {
		return this.kernel.get
	}

	/** Set the Bootique runtime instance.
	 *
	 * @param runtime the new Bootique runtime.
	 * @return {@code true} if the runtime has been changed.
	 */
	def setRuntime(runtime : BQRuntime) : boolean {
		if (this.runtime !== runtime) {
			this.runtime = runtime
			return true
		}
		return false
	}

	override isRunning : boolean {
		val k = getKernel
		return k !== null && k.isRunning
	}

	override setRandomContextUUID {
		this.bootType = RootContextType::RANDOM
		this.userDefinedContextId = null
	}

	override setBootAgentTypeContextUUID {
		this.bootType = RootContextType::BOOT_AGENT_NAME
		this.userDefinedContextId = null
	}

	override setSpecificContextUUID {
		this.bootType = RootContextType::DEFAULT
		this.userDefinedContextId = null
	}

	override setUniverseContextUUID(id : UUID) {
		this.userDefinedContextId = id
	}

	override getUniverseContextUUID : UUID {
		this.userDefinedContextId
	}

	override setUniverseSpaceUUID(id : UUID) {
		this.userDefinedSpaceId = id
	}

	override getUniverseSpaceUUID : UUID {
		this.userDefinedSpaceId
	}

	override setVerboseLevel(level : int) {
		var julLevel : Level
		switch (level) {
			case 1: {
				julLevel = Level::SEVERE
			}
			case 2: {
				julLevel = Level::WARNING
			}
			case 3: {
				julLevel = Level::INFO
			}
			case 4: {
				julLevel = Level::FINE
			}
			case 5: {
				julLevel = Level::FINER
			}
			case 6: {
				julLevel = Level::FINEST
			}
			default: {
				if (level <= 0) {
					julLevel = Level::OFF
				} else {
					julLevel = Level::ALL
				}
			}
		}
		val runtime = getRuntime
		if (runtime !== null) {
			val logConfig = runtime.getInstance(typeof(LogConfig))
			logConfig.julLevel = julLevel
		}		
		val logger = kernelLogger
		if (logger !== null) {
			logger.level = julLevel
		}		
	}

	override getKernelLogger : Logger {
		if (isActive) {
			var service = this.runtime.getInstance(typeof(LoggingService))
			return service.platformLogger
		}
		return null
	}

	/** Create the SRE runtime.
	 * 
	 * @param bootique the instance of the bootique accessor, or {@code null} if none is provided.
	 * @param module specify the type of the injection module to be used by the bootique accessor.
	 * @param args the command line arguments to put into the bootique accessor. This argument is used only if {@code bootique}
	 *      is evaluated to {@code null}.
	 * @return the runtime.
	 */
	protected def createRuntime(bootique : Bootique, module : Class<? extends Module>, args : String*) : BQRuntime {
		var bt = bootique ?: Bootique::app(args)
		if (module !== null) {
			bt = bt.module(module)
		}
		return bt.autoLoadModules.createRuntime
	}

	private def ensureBootiqueRuntimeInstance(bootique : Bootique, module : Class<? extends Module>, args : String*) : BQRuntime {
		var r = this.runtime
		if (r === null) {
			this.runtime = createRuntime(bootique, module, args)
			r = this.runtime
		}
		return this.runtime
	}

	/** Filter the command-line arguments for extracting the -D parameters.
	 *
	 * @param args the arguments.
	 * @return the filtered arguments.
	 * @since 0.12
	 */
	static def filterCommandLineArguments(args: String[]) : String[] {
		val list = newArrayList
		val pattern = Pattern::compile(D_PATTERN)
		for (arg : args) {
			val matcher = pattern.matcher(arg)
			if (matcher.matches) {
				val name = matcher.group(1)
				val value = matcher.group(2)
				System::setProperty(name, value)
			} else {
				list += arg
			}
		}
		val tab = newArrayOfSize(list.size)
		list.toArray(tab)
		return tab
	}

	/** Run the SRE.
	 *
	 * <p>This function runs the SRE and exits with the return code.
	 *
	 * @param args the command line arguments.
	 * @return the exit code.
	 */
	def runSRE(args : String*) : int {
		val fargs = args.filterCommandLineArguments
		var runtime = ensureBootiqueRuntimeInstance(null, null, fargs)
		try {
			// Force the bootstrap to be this object
			SRE::bootstrap = this
			val outcome = runtime.run
			if (outcome !== null) {
				if (!outcome.success && outcome.exception !== null) {
					Logger::getGlobal.log(Level::SEVERE, outcome.message, outcome.exception)
				}
				return outcome.exitCode
			}
		} catch (exception : ProvisionException) {
			val ex = Throwables::getRootCause(exception)
			if (ex !== null) {
				Logger::getGlobal.log(Level::SEVERE, ex.localizedMessage, ex)
			} else {
				Logger::getGlobal.severe(exception.localizedMessage)
			}
		} catch (exception : Throwable) {
			Logger::getGlobal.log(Level::SEVERE, exception.localizedMessage, exception)
		}
		return 255
	}

	private def ensureKernelInstance(asCommandLineApp : boolean, bootique : Bootique, module : Class<? extends Module>, args : String*) : Kernel {
		var k = getKernel
		if (k === null) {
			var runtime = ensureBootiqueRuntimeInstance(bootique, module, args.addToCommandLineArguments)
			// Start the SRE as it was called from a shell command line.
			// This option breaks the programmatic usage of the bootstrap. It is provided for debugging purpose.
			if (asCommandLineApp) {
				val outcome = runtime.run
				if (outcome !== null) {
					if (!outcome.success && outcome.exception !== null) {
						Logger::getGlobal.log(Level::SEVERE, outcome.message, outcome.exception)
					}
				}
				return null
			}
			val injector = runtime.getInstance(typeof(Injector))
			// Update the method for selecting the root context identifier
			if (this.bootType !== null
					|| this.userDefinedContextId !== null
					|| this.userDefinedSpaceId !== null) {
				val sreConfig = injector.getInstance(typeof(SreConfig))
				if (this.bootType !== null) {
					sreConfig.boot.rootContextBootType = this.bootType
				}
				if (this.userDefinedContextId !== null) {
					sreConfig.boot.rootContextID = this.userDefinedContextId
				}
				if (this.userDefinedSpaceId !== null) {
					sreConfig.boot.rootSpaceID = this.userDefinedSpaceId
				}
			}
			k = injector.getInstance(typeof(Kernel))
			val listener : KernelAgentLifecycleListener = [
				this.kernel.set(null)
				this.runtime = null
				fireSREStopped
			]
			k.getService(typeof(LifecycleService)).addKernelAgentLifecycleListener(listener)
			this.kernel.set(k)
			fireSREStarted
		}
		// Force the bootstrap to be this object
		SRE::bootstrap = this
		return k
	}

	/** Start the agent framework without agent.
	 * 
	 * @param asCommandLineApp indicates if the application should be started as a commend-line application.
	 *     If {@code true}, the SRE is started and run directly. Then, the "start agent" functions becomes
	 *     unusable because the SRE has started everything as it is called from the shell command line.
	 *     If {@code false}, the SRE is started in is normal way and all the functions are available according
	 *     to their own specifications.
	 *     If it not recommended to invoke this function with this argument evaluated to {@code true}.
	 * @param bootique the Bootique instance to set up the framework. If it is {@code null},
	 * the default Bootique instance is created.
	 * @param module the injection module to use. If it is {@code null}, the default module is used.
	 */
	def startWithoutAgent(asCommandLineApp : boolean, bootique : Bootique = null, module : Class<? extends Module> = null) : AgentContext {
		val ctx = ensureKernelInstance(asCommandLineApp, bootique, module)
		return ctx?.rootContext
	}
	
	override startAgent(nbAgents : int, agentCls : Class<? extends Agent>,
		params : Object*) {
		val propName = VariableNames::toPropertyName(BootConfig::BOOT_AGENT_NAME)
		val old = System::setProperty(propName, agentCls.name)
		var kernel : Kernel
		try {
			kernel = ensureKernelInstance(false, null, null)
		} finally {
			if (old === null) {
				System::clearProperty(propName)
			} else {
				System::setProperty(propName, old)
			}
		}
		kernel.spawn(nbAgents, agentCls, params)
	}

	/** Start the boot agent if it is specified in the boot configuration.
	 */
	def startBootAgent {
		var config = this.runtime.getInstance(typeof(SreConfig)).boot
		var bootAgent = config.loadBootAgent
		assert bootAgent !== null
		var args = config.agentStartArgs
		startAgent(bootAgent, args)
	}

	override startAgent(agentCls : Class<? extends Agent>, params : Object*) {
		val propName = VariableNames::toPropertyName(BootConfig::BOOT_AGENT_NAME)
		assert propName !== null
		var alreadyLaunched = System::getProperty(propName)
		if (alreadyLaunched.nullOrEmpty) {
			// Force the property that indicates the booted agent
			System::setProperty(propName, agentCls.name)
		}
		val kernel = ensureKernelInstance(false, null, null)
		kernel.spawn(agentCls, params)
	}
	
	override startAgentWithID(agentCls : Class<? extends Agent>, agentID : UUID, params : Object*) {
		val propName = VariableNames::toPropertyName(BootConfig::BOOT_AGENT_NAME)
		assert propName !== null
		var alreadyLaunched = System::getProperty(propName)
		if (alreadyLaunched.nullOrEmpty) {
			// Force the property that indicates the booted agent
			System::setProperty(propName, agentCls.name)
		}
		val kernel = ensureKernelInstance(false, null, null)
		kernel.spawn(agentID, agentCls, params)
	}

	@SuppressWarnings("discouraged_reference")
	override shutdown(timeout : int) {
		val kern = this.kernel.getAndSet(null)
		if (kern !== null) {
			if (timeout !== 0) {
				kern.shutdown(timeout)
			} else {
				val th = Executors::defaultThreadFactory.newThread [
					kern.shutdown(BACKGROUND_SHUTDOWN_TIMEOUT)
				]
				th => [
					daemon = true
					name = "SRE Forced Async Shutdown"
					start
				]
			}
		}
	}

	override getService(serviceType : Class<T>) : T with T {
		if (typeof(Service).isAssignableFrom(serviceType)) {
			var kern = getKernel
			if (kern !== null) {
				var castedServiceType = serviceType.asSubclass(typeof(Service))
				var serv = kern.getService(castedServiceType)
				return serviceType.cast(serv)
			}
		}
		return null
	}

	override addSREListener(listener : SREListener) {
		if (listener !== null) {
			this.listeners.add(typeof(SREListener), listener)
		}
	}

	override removeSREListener(listener : SREListener) {
		if (listener !== null) {
			this.listeners.remove(typeof(SREListener), listener)
		}
	}

	/** Notifies the observers that the SRE has been started.
	 *
	 * @since 0.11
	 */
	protected def fireSREStarted {
		val observers = this.listeners.getListeners(typeof(SREListener))
		for (observer : observers) {
			try {
				observer.sreStarted(this)
			} catch (exception : Throwable) {
				getKernelLogger.log(Level::SEVERE, exception.localizedMessage, exception)
			}
		}
	}

	/** Notifies the observers that the SRE has been stopped.
	 * 
	 * @since 0.11
	 */
	protected def fireSREStopped {
		val observers = this.listeners.getListeners(typeof(SREListener))
		for (observer : observers) {
			try {
				observer.sreStopped(this)
			} catch (exception : Throwable) {
				getKernelLogger.log(Level::SEVERE, exception.localizedMessage, exception)
			}
		}
	}
	
}
