/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
package io.sarl.sre.tests.runtime.bugs.to1500.bug1063.mocks

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.UUID
import java.util.concurrent.atomic.AtomicInteger
import io.sarl.core.Behaviors

@SuppressWarnings("potential_field_synchronization_problem")
agent PingAgent {
	uses DefaultContextInteractions, ExternalContextAccess, Behaviors
	uses TestingCapacity

	val nb = new AtomicInteger(0)

	var pongId : UUID

	var theSpace : OpenEventSpace

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		this.pongId = typeof(UUID).getParam(0)
		val spaceId = typeof(UUID).getParam(1)
		this.theSpace = defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification), spaceId)
		this.theSpace.registerStrongParticipant(asEventListener)
		addResult("SID = " + spaceId)
		addResult("SPACE = " + System.identityHashCode(this.theSpace))
	}
	
	on StartPingPong {
		this.theSpace.emit(new PingEvent) [it.ID == this.pongId]
	}

	on PongEvent {
		val n = this.nb.incrementAndGet
		if (n === Consts::NB) {
			killMeSoon
		} else {
			this.theSpace.emit(new PingEvent) [it.ID == occurrence.source.ID]
		}
	}

}
