/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.bugs.to1000.bug977.mocks

import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.sre.test.framework.events.Bye
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.concurrent.atomic.AtomicInteger

agent SharedGuardEvaluationAgent1 {

	protected val i = new AtomicInteger(3)

	uses TestingCapacity, Lifecycle

	on Initialize {
		setSkillIfAbsent(new TestingSkill(occurrence))
		addResult("a")
		i.set(10)
	}
	
	on Initialize [i.get < 3] {
		setSkillIfAbsent(new TestingSkill(occurrence))
		addResult("b")
		i.set(10)
	}

	on Initialize [i.get <= 3] {
		setSkillIfAbsent(new TestingSkill(occurrence))
		addResult("c")
		i.set(10)
	}

	on Initialize [i.get == 3] {
		setSkillIfAbsent(new TestingSkill(occurrence))
		addResult("d")
		i.set(10)
	}

	on Initialize [i.get != 3] {
		setSkillIfAbsent(new TestingSkill(occurrence))
		addResult("e")
		i.set(10)
	}
	
	on Initialize [i.get >= 3] {
		setSkillIfAbsent(new TestingSkill(occurrence))
		addResult("f")
		i.set(10)
	}

	on Initialize [i.get > 3] {
		setSkillIfAbsent(new TestingSkill(occurrence))
		addResult("g")
		i.set(10)
	}

	on Bye {
		killMe
	}

}
