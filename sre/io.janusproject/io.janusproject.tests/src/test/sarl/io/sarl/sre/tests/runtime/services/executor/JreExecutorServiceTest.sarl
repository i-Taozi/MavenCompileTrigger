/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.tests.runtime.services.executor;

import io.sarl.lang.annotation.PrivateAPI
import io.sarl.sre.boot.configs.subconfigs.ExecutorsConfig
import io.sarl.sre.services.executor.JreExecutorService
import io.sarl.sre.services.lifecycle.LifecycleService
import io.sarl.sre.test.framework.context.SreRunContext
import io.sarl.sre.tests.runtime.services.executor.mocks.CancelTaskAgent2
import java.util.List
import java.util.concurrent.ScheduledThreadPoolExecutor
import java.util.concurrent.ThreadPoolExecutor
import java.util.concurrent.atomic.AtomicLong
import org.arakhne.afc.bootique.variables.VariableNames
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

import static io.sarl.sre.test.framework.Constants.*
import static io.sarl.tests.api.tools.TestAssertions.*

import static extension io.sarl.tests.api.tools.TestUtils.*
import static extension org.junit.jupiter.api.Assertions.assertEquals
import static extension org.junit.jupiter.api.Assertions.assertFalse

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@DisplayName("run: JreExecutor service test")
@Tag("sre-run")
@Tag("janus")
class JreExecutorServiceTest extends AbstractExecutorServiceRunTest {

	@BeforeEach
	def setUp : void {
		// Disable the background tasks of the kernel
		var prop = VariableNames::toPropertyName(ExecutorsConfig::PERIODIC_THREAD_POOL_PURGE_NAME)
		System::setProperty(prop, Boolean::FALSE.toString)
	}

	@Test
	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	def cancel_00b(extension rc : SreRunContext) : void {
		val nb0 = new AtomicLong(0l)
		val nb1 = new AtomicLong(0l)
		val kern = typeof(CancelTaskAgent2).setupTheSreKernel(null, null)
		val service = kern.getService(JreExecutorService)
		kern.getService(typeof(LifecycleService)).addKernelAgentLifecycleListener [
			var exec = service.executorService as ThreadPoolExecutor
			exec.terminated.assertFalse
			var eq = exec.queue
			nb0.set(eq.size)

			var sexec = service.scheduledExecutorService as ScheduledThreadPoolExecutor
			sexec.terminated.assertFalse
			var seq = sexec.queue
			nb1.set(seq.size)
		]
		waitForTheKernel(EXTRA_TIMEOUT)

		// Check the number of active tasks into the agent
		var all = allResults
		assertEquals(5, all.size)
		// After creating T1
		var actives1 = all.elementAt(typeof(List), 0)
		assertContains(actives1, "T1")
		// After creating T1 and T2
		var actives2 = all.elementAt(typeof(List), 1)
		assertContains(actives2, "T1", "T2")
		// After creating T1, T2 and T3
		var actives3 = all.elementAt(typeof(List), 2)
		assertContains(actives3, "T1", "T2", "T3")
		// After cancel T1. T2 and T3 are still active
		var actives4 = all.elementAt(typeof(List), 3)
		assertContains(actives4, "T2", "T3")
		// Inside on destroy
		var actives5 = all.elementAt(typeof(List), 4)
		assertContains(actives5)

		// Check the number of tasks at the kernel level
		0l.assertEquals(nb0.get)
		
		// At least, the space destroying task in SpaceRepository should be active
		1l.assertEquals(nb1.get)
	}

}
