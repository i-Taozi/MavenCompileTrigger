/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.spaces.mocks

import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.MemberLeft
import io.sarl.core.Schedules
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("discouraged_occurrence_readonly_use")
agent SourceAgent2 {

	uses Behaviors, Lifecycle, Schedules, InnerContextAccess

	uses TestingCapacity
	
	on Initialize {
		setSkill(new TestingSkill(occurrence))
		typeof(TargetAgent).spawnInContext(innerContext, agentInitializationParameters)
	}

	on AgentSpawned [occurrence.source.ID == ID] {
		addResult(occurrence.agentID)
		in(1000) [
			wake(new TestEvent(ID))
		]
	}

	on MemberLeft {
		killMe
	}
	
}
