/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.services.executor.mocks

import io.sarl.core.Failure
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.core.TaskFailure
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
agent FailureTaskAgent {

	uses Schedules, Lifecycle

	uses TestingCapacity

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		in(1000) [
			addResult("INITIATED")
			throw new FailureTaskAgentException
		]
	}

	on Failure {
		if (occurrence instanceof TaskFailure) {
			val err = occurrence
			if (err.task.initiator !== this) {
				addResult("INVALID INITIATOR TYPE: " + err.task.initiator)
			} else if (!(occurrence.cause instanceof FailureTaskAgentException)) {
				addResult("INVALID CAUSE TYPE: " + err.cause)
			} else {
				addResult("FINISHED ON ERROR")
			}
		}
		killMe
	}

}

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class FailureTaskAgentException extends Exception {
	//
}
