/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.spaces.mocks

import io.sarl.lang.core.SpaceID
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.spaces.AbstractEventSpace
import io.sarl.sre.spaces.Participant
import io.sarl.sre.spaces.SpaceParticipantListener
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import java.util.logging.Logger

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

import static extension io.sarl.tests.api.tools.TestMockito.mock

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
final class XAbstractEventSpaceMock extends AbstractEventSpace {
	
	new (participants1 : ConcurrentHashMap<UUID, Participant>, participants2 : ConcurrentHashMap<UUID, Participant>,
		spaceId : SpaceID) {
		super(spaceId, typeof(SpaceParticipantListener).mock, createLoggingServiceMock,
			participants1, participants2)
	}

	static def createLoggingServiceMock : LoggingService {
		val service = typeof(LoggingService).mock
		val logger = typeof(Logger).mock
		when(service.getKernelModuleLogger(anyString)).thenReturn(logger)
		when(service.getKernelLogger).thenReturn(logger)
		return service
	}
	
}
