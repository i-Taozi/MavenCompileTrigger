/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.bugs.to1000.bug976.mocks

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.sre.test.framework.events.Bye
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.concurrent.atomic.AtomicInteger
import io.sarl.core.InnerContextAccess
import io.sarl.core.AgentKilled
import io.sarl.core.Behaviors

@SuppressWarnings("all")
agent AgentNSpawnISBootAgent {
	
	uses Lifecycle, DefaultContextInteractions, InnerContextAccess, Behaviors

	uses TestingCapacity

	val totalNumber = new AtomicInteger(0)
	val nbSpawn = new AtomicInteger(0)

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		val nb : int = getParam(0)
		this.totalNumber.set(nb)
		for (var i = 0; i < nb; i++) {
			typeof(ScalableAgent).spawnInContext(innerContext, buildAgentInitializationParameters(i))
			//System.out.println("SPAWN:" + (i+1))
		}
		("nb-spawn-" + nb).addResult
	}

	on Ready {
		val n = this.nbSpawn.incrementAndGet
		//System.out.println("READY:" + n)
		//System.out.println("[" + n + "]: " + executorServiceStateRepresentation)
		if (n >= this.totalNumber.get) {
			"all-spawn".addResult
			//System.out.println("DIE:" + n)
			wake(new Bye)
		}
	}

	on AgentKilled {
		if (!hasMemberAgent) {
			killMe
		}
	}
	
}
