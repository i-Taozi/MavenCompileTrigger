/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.bugs.bug1028

import io.sarl.lang.SARLVersion
import io.sarl.lang.sarl.SarlPackage
import io.sarl.tests.api.AbstractSarlTest
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

import static io.sarl.tests.api.tools.TestEObjects.file
import static io.sarl.tests.api.tools.TestUtils.multilineString
import static io.sarl.tests.api.tools.TestValidator.validate

import static extension org.junit.jupiter.api.Assertions.assertEquals

/** Testing class for issue: Bug in java code generation for inline
 *  innner class definition within a object constructor.
 *
 * <p>https://github.com/sarl/sarl/issues/1028
 *
 * <p>See general tests in the "io.sarl.lang.tests" project.
 *
 * @author $Author: sgalland$
 * @version $Name$ $Revision$ $Date$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @see "https://github.com/sarl/sarl/issues/1028"
 */
@DisplayName("unit: Bug #1028")
@SuppressWarnings("all")
@Tag("unit")
@Tag("janus")
@Tag("sre-unit")
class Bug1028Test extends AbstractSarlTest {

	val SARL_CODE_01 = multilineString(
			"package io.sarl.lang.tests.bug1028",
			"",
			"import com.google.inject.Injector",
			"import io.sarl.sre.boot.configs.SreConfig",
			"import io.sarl.sre.KernelScope",
			"import io.sarl.sre.internal.Factories",
			"import io.sarl.sre.services.context.Context",
			"import io.sarl.sre.services.context.ContextFactory",
			"import io.sarl.sre.services.context.MemoryBasedContextService",
			"import io.sarl.sre.services.logging.LoggingService",
			"import java.util.logging.Logger",
			"import java.util.Map",
			"import java.util.UUID",
			"import javax.inject.Provider",
			"",
			"interface HazelcastInstance {",
			"  def getMap(name : String) : HazelcastMap<A, B> with A, B",
			"}",
			"interface MapEvent {",
			"}",
			"interface EntryEvent<A, B> extends Map.Entry<A, B> {",
			"}",
			"interface EntryListener<A, B> {",
			"  def entryAdded(^event : EntryEvent<A, B>)",
			"  def entryUpdated(^event : EntryEvent<A, B>)",
			"  def entryRemoved(^event : EntryEvent<A, B>)",
			"  def entryEvicted(^event : EntryEvent<A, B>)",
			"  def entryExpired(^event : EntryEvent<A, B>)",
			"  def mapCleared(^event : MapEvent)",
			"  def mapEvicted(^event : MapEvent)",
			"}",
			"interface HazelcastMap<A, B> extends Map<A, B> {",
			"  def addEntryListener(listener : EntryListener<A, B>, flag : boolean) : UUID",
			"}",
			"",
			"class Bug1028Class extends MemoryBasedContextService {",
			"  ",
			"  val hazelcastInstance : HazelcastInstance",
			"  val kernelLogger : Logger",
			"  val defaultSpacesListenerID : UUID",
			"  var defaultSpaces : HazelcastMap<UUID, UUID>",
			"  ",
			"  new(sreConfig : SreConfig, @KernelScope rootContext : Context,",
			"      injector : Injector, factory : ContextFactory,",
			"      iHazelcastInstance : HazelcastInstance,",
			"      distributedContextSpaceMapName : String,",
			"      logger : LoggingService,",
			"      factories : Provider<Factories>) {",
			"    super(rootContext, logger, injector, factory, factories);",
			"    ",
			"    hazelcastInstance = iHazelcastInstance;",
			"    defaultSpaces = this.hazelcastInstance.getMap(sreConfig.boot.rootContextID.toString());",
			"    this.defaultSpaces.putIfAbsent(rootContext.ID, rootContext.defaultSpace.spaceID.ID);",
			"    var defaultSpacesListener : EntryListener<UUID, UUID> = new EntryListener<UUID, UUID>() {",
			"      def entryAdded(^event : EntryEvent<UUID, UUID>) {",
			"        ensureDefaultSpaceDefinition(^event.key, ^event.value, null)",
			"      }",
			"      def entryUpdated(^event : EntryEvent<UUID, UUID>) {",
			"      }",
			"      def entryRemoved(^event : EntryEvent<UUID, UUID>) {",
			"        removeDefaultSpaceDefinition(^event.key, ^event.value)",
			"      }",
			"      def entryEvicted(^event : EntryEvent<UUID, UUID>) {",
			"      }",
			"      def entryExpired(^event : EntryEvent<UUID, UUID>) {",
			"      }",
			"      def mapCleared(^event : MapEvent) {",
			"      }",
			"      def mapEvicted(^event : MapEvent) {",
			"      }",
			"    }",
			"    defaultSpacesListenerID = defaultSpaces.addEntryListener(defaultSpacesListener, true)",
			"    kernelLogger = logger.getKernelLogger",
			"  }",
			"  ",
			"  def ensureDefaultSpaceDefinition(a : UUID, b : UUID, c : Object = null) {",
			"  }",
			"  def removeDefaultSpaceDefinition(a : UUID, b : UUID) {",
			"  }",
			"}");

	val JAVA_CODE_01 = multilineString(
			"package io.sarl.lang.tests.bug1028;",
			"",
			"import com.google.inject.Injector;",
			"import io.sarl.lang.annotation.DefaultValue;",
			"import io.sarl.lang.annotation.DefaultValueSource;",
			"import io.sarl.lang.annotation.DefaultValueUse;",
			"import io.sarl.lang.annotation.Injectable;",
			"import io.sarl.lang.annotation.SarlElementType;",
			"import io.sarl.lang.annotation.SarlSourceCode;",
			"import io.sarl.lang.annotation.SarlSpecification;",
			"import io.sarl.lang.annotation.SyntheticMember;",
			"import io.sarl.lang.tests.bug1028.EntryEvent;",
			"import io.sarl.lang.tests.bug1028.EntryListener;",
			"import io.sarl.lang.tests.bug1028.HazelcastInstance;",
			"import io.sarl.lang.tests.bug1028.HazelcastMap;",
			"import io.sarl.lang.tests.bug1028.MapEvent;",
			"import io.sarl.sre.KernelScope;",
			"import io.sarl.sre.boot.configs.SreConfig;",
			"import io.sarl.sre.internal.Factories;",
			"import io.sarl.sre.services.context.Context;",
			"import io.sarl.sre.services.context.ContextFactory;",
			"import io.sarl.sre.services.context.MemoryBasedContextService;",
			"import io.sarl.sre.services.logging.LoggingService;",
			"import java.util.UUID;",
			"import java.util.logging.Logger;",
			"import javax.inject.Provider;",
			"import org.eclipse.xtext.xbase.lib.Pure;",
			"",
			"@SarlSpecification(\"" + SARLVersion::SPECIFICATION_RELEASE_VERSION_STRING + "\")",
			"@SarlElementType(" + SarlPackage::SARL_CLASS + ")",
			"@Injectable",
			"@SuppressWarnings(\"all\")",
			"public class Bug1028Class extends MemoryBasedContextService {",
			"  private final HazelcastInstance hazelcastInstance;",
			"  ",
			"  private final Logger kernelLogger;",
			"  ",
			"  private final UUID defaultSpacesListenerID;",
			"  ",
			"  private HazelcastMap<UUID, UUID> defaultSpaces;",
			"  ",
			"  public Bug1028Class(final SreConfig sreConfig, @KernelScope final Context rootContext, final Injector injector, final ContextFactory factory, final HazelcastInstance iHazelcastInstance, final String distributedContextSpaceMapName, final LoggingService logger, final Provider<Factories> factories) {",
			"    super(rootContext, logger, injector, factory, factories);",
			"    this.hazelcastInstance = iHazelcastInstance;",
			"    this.defaultSpaces = this.hazelcastInstance.<UUID, UUID>getMap(sreConfig.getBoot().getRootContextID().toString());",
			"    this.defaultSpaces.putIfAbsent(rootContext.getID(), rootContext.getDefaultSpace().getSpaceID().getID());",
			"    EntryListener<UUID, UUID> defaultSpacesListener = new EntryListener<UUID, UUID>() {",
			"      public void entryAdded(final EntryEvent<UUID, UUID> event) {",
			"        Bug1028Class.this.ensureDefaultSpaceDefinition(event.getKey(), event.getValue(), null);",
			"      }",
			"      ",
			"      public void entryUpdated(final EntryEvent<UUID, UUID> event) {",
			"      }",
			"      ",
			"      public void entryRemoved(final EntryEvent<UUID, UUID> event) {",
			"        Bug1028Class.this.removeDefaultSpaceDefinition(event.getKey(), event.getValue());",
			"      }",
			"      ",
			"      public void entryEvicted(final EntryEvent<UUID, UUID> event) {",
			"      }",
			"      ",
			"      public void entryExpired(final EntryEvent<UUID, UUID> event) {",
			"      }",
			"      ",
			"      public void mapCleared(final MapEvent event) {",
			"      }",
			"      ",
			"      public void mapEvicted(final MapEvent event) {",
			"      }",
			"    };",
			"    this.defaultSpacesListenerID = this.defaultSpaces.addEntryListener(defaultSpacesListener, true);",
			"    this.kernelLogger = logger.getKernelLogger();",
			"  }",
			"  ",
			"  @DefaultValueSource",
			"  public void ensureDefaultSpaceDefinition(final UUID a, final UUID b, @DefaultValue(\"io.sarl.lang.tests.bug1028.Bug1028Class#ENSUREDEFAULTSPACEDEFINITION_0\") final Object c) {",
			"  }",
			"  ",
			"  public void removeDefaultSpaceDefinition(final UUID a, final UUID b) {",
			"  }",
			"  ",
			"  /**",
			"   * Default value for the parameter c",
			"   */",
			"  @Pure",
			"  @SyntheticMember",
			"  @SarlSourceCode(\"null\")",
			"  private final Object $DEFAULT_VALUE$ENSUREDEFAULTSPACEDEFINITION_0() {",
			"    return null;",
			"  }",
			"  ",
			"  @DefaultValueUse(\"java.util.UUID,java.util.UUID,java.lang.Object\")",
			"  @SyntheticMember",
			"  public final void ensureDefaultSpaceDefinition(final UUID a, final UUID b) {",
			"    ensureDefaultSpaceDefinition(a, b, $DEFAULT_VALUE$ENSUREDEFAULTSPACEDEFINITION_0());",
			"  }",
			"}",
			"");

	@Test
	@DisplayName("Submitted-code parsing")
	@Tag("sarlParsing")
	def parsing01 : void {
		val mas = file(getParseHelper, SARL_CODE_01);
		val validator = validate(getValidationHelper, getInjector, mas)
		validator.assertNoErrors
	}

	@Test
	@DisplayName("Submitted-code transformation")
	@Tag("compileToJava")
	def compiling01 : void {
		getCompileHelper().compile(SARL_CODE_01) [
			val actual = it.getGeneratedCode("io.sarl.lang.tests.bug1028.Bug1028Class")
			JAVA_CODE_01.assertEquals(actual)
		]
	}

	val SARL_CODE_02 = multilineString(
			"package io.sarl.lang.tests.bug1028",
			"",
			"import com.google.inject.Injector",
			"import io.sarl.sre.boot.configs.SreConfig",
			"import io.sarl.sre.KernelScope",
			"import io.sarl.sre.internal.Factories",
			"import io.sarl.sre.services.context.Context",
			"import io.sarl.sre.services.context.ContextFactory",
			"import io.sarl.sre.services.context.MemoryBasedContextService",
			"import io.sarl.sre.services.logging.LoggingService",
			"import java.util.logging.Logger",
			"import java.util.Map",
			"import java.util.UUID",
			"import javax.inject.Provider",
			"",
			"interface HazelcastInstance {",
			"  def getMap(name : String) : HazelcastMap<A, B> with A, B",
			"}",
			"interface MapEvent {",
			"}",
			"interface EntryEvent<A, B> extends Map.Entry<A, B> {",
			"}",
			"interface EntryListener<A, B> {",
			"  def entryAdded(^event : EntryEvent<A, B>)",
			"  def entryUpdated(^event : EntryEvent<A, B>)",
			"  def entryRemoved(^event : EntryEvent<A, B>)",
			"  def entryEvicted(^event : EntryEvent<A, B>)",
			"  def entryExpired(^event : EntryEvent<A, B>)",
			"  def mapCleared(^event : MapEvent)",
			"  def mapEvicted(^event : MapEvent)",
			"}",
			"interface HazelcastMap<A, B> extends Map<A, B> {",
			"  def addEntryListener(listener : EntryListener<A, B>, flag : boolean) : UUID",
			"}",
			"",
			"class Bug1028Class extends MemoryBasedContextService {",
			"  ",
			"  val hazelcastInstance : HazelcastInstance",
			"  val kernelLogger : Logger",
			"  val defaultSpacesListenerID : UUID",
			"  var defaultSpaces : HazelcastMap<UUID, UUID>",
			"  ",
			"  new(sreConfig : SreConfig, @KernelScope rootContext : Context,",
			"      injector : Injector, factory : ContextFactory,",
			"      iHazelcastInstance : HazelcastInstance,",
			"      distributedContextSpaceMapName : String,",
			"      logger : LoggingService,",
			"      factories : Provider<Factories>) {",
			"    super(rootContext, logger, injector, factory, factories);",
			"    ",
			"    hazelcastInstance = iHazelcastInstance;",
			"    defaultSpaces = this.hazelcastInstance.getMap(sreConfig.boot.rootContextID.toString());",
			"    this.defaultSpaces.putIfAbsent(rootContext.ID, rootContext.defaultSpace.spaceID.ID);",
			"    var defaultSpacesListener : EntryListener<UUID, UUID> = new EntryListener<UUID, UUID>() {",
			"      override entryAdded(^event : EntryEvent<UUID, UUID>) {",
			"        ensureDefaultSpaceDefinition(^event.key, ^event.value, null)",
			"      }",
			"      override entryUpdated(^event : EntryEvent<UUID, UUID>) {",
			"      }",
			"      override entryRemoved(^event : EntryEvent<UUID, UUID>) {",
			"        removeDefaultSpaceDefinition(^event.key, ^event.value)",
			"      }",
			"      override entryEvicted(^event : EntryEvent<UUID, UUID>) {",
			"      }",
			"      override entryExpired(^event : EntryEvent<UUID, UUID>) {",
			"      }",
			"      override mapCleared(^event : MapEvent) {",
			"      }",
			"      override mapEvicted(^event : MapEvent) {",
			"      }",
			"    }",
			"    defaultSpacesListenerID = defaultSpaces.addEntryListener(defaultSpacesListener, true)",
			"    kernelLogger = logger.getKernelLogger",
			"  }",
			"  ",
			"  def ensureDefaultSpaceDefinition(a : UUID, b : UUID, c : Object = null) {",
			"  }",
			"  def removeDefaultSpaceDefinition(a : UUID, b : UUID) {",
			"  }",
			"}");

	val JAVA_CODE_02 = multilineString(
			"package io.sarl.lang.tests.bug1028;",
			"",
			"import com.google.inject.Injector;",
			"import io.sarl.lang.annotation.DefaultValue;",
			"import io.sarl.lang.annotation.DefaultValueSource;",
			"import io.sarl.lang.annotation.DefaultValueUse;",
			"import io.sarl.lang.annotation.Injectable;",
			"import io.sarl.lang.annotation.SarlElementType;",
			"import io.sarl.lang.annotation.SarlSourceCode;",
			"import io.sarl.lang.annotation.SarlSpecification;",
			"import io.sarl.lang.annotation.SyntheticMember;",
			"import io.sarl.lang.tests.bug1028.EntryEvent;",
			"import io.sarl.lang.tests.bug1028.EntryListener;",
			"import io.sarl.lang.tests.bug1028.HazelcastInstance;",
			"import io.sarl.lang.tests.bug1028.HazelcastMap;",
			"import io.sarl.lang.tests.bug1028.MapEvent;",
			"import io.sarl.sre.KernelScope;",
			"import io.sarl.sre.boot.configs.SreConfig;",
			"import io.sarl.sre.internal.Factories;",
			"import io.sarl.sre.services.context.Context;",
			"import io.sarl.sre.services.context.ContextFactory;",
			"import io.sarl.sre.services.context.MemoryBasedContextService;",
			"import io.sarl.sre.services.logging.LoggingService;",
			"import java.util.UUID;",
			"import java.util.logging.Logger;",
			"import javax.inject.Provider;",
			"import org.eclipse.xtext.xbase.lib.Pure;",
			"",
			"@SarlSpecification(\"" + SARLVersion::SPECIFICATION_RELEASE_VERSION_STRING + "\")",
			"@SarlElementType(" + SarlPackage::SARL_CLASS + ")",
			"@Injectable",
			"@SuppressWarnings(\"all\")",
			"public class Bug1028Class extends MemoryBasedContextService {",
			"  private final HazelcastInstance hazelcastInstance;",
			"  ",
			"  private final Logger kernelLogger;",
			"  ",
			"  private final UUID defaultSpacesListenerID;",
			"  ",
			"  private HazelcastMap<UUID, UUID> defaultSpaces;",
			"  ",
			"  public Bug1028Class(final SreConfig sreConfig, @KernelScope final Context rootContext, final Injector injector, final ContextFactory factory, final HazelcastInstance iHazelcastInstance, final String distributedContextSpaceMapName, final LoggingService logger, final Provider<Factories> factories) {",
			"    super(rootContext, logger, injector, factory, factories);",
			"    this.hazelcastInstance = iHazelcastInstance;",
			"    this.defaultSpaces = this.hazelcastInstance.<UUID, UUID>getMap(sreConfig.getBoot().getRootContextID().toString());",
			"    this.defaultSpaces.putIfAbsent(rootContext.getID(), rootContext.getDefaultSpace().getSpaceID().getID());",
			"    EntryListener<UUID, UUID> defaultSpacesListener = new EntryListener<UUID, UUID>() {",
			"      @Override",
			"      public void entryAdded(final EntryEvent<UUID, UUID> event) {",
			"        Bug1028Class.this.ensureDefaultSpaceDefinition(event.getKey(), event.getValue(), null);",
			"      }",
			"      ",
			"      @Override",
			"      public void entryUpdated(final EntryEvent<UUID, UUID> event) {",
			"      }",
			"      ",
			"      @Override",
			"      public void entryRemoved(final EntryEvent<UUID, UUID> event) {",
			"        Bug1028Class.this.removeDefaultSpaceDefinition(event.getKey(), event.getValue());",
			"      }",
			"      ",
			"      @Override",
			"      public void entryEvicted(final EntryEvent<UUID, UUID> event) {",
			"      }",
			"      ",
			"      @Override",
			"      public void entryExpired(final EntryEvent<UUID, UUID> event) {",
			"      }",
			"      ",
			"      @Override",
			"      public void mapCleared(final MapEvent event) {",
			"      }",
			"      ",
			"      @Override",
			"      public void mapEvicted(final MapEvent event) {",
			"      }",
			"    };",
			"    this.defaultSpacesListenerID = this.defaultSpaces.addEntryListener(defaultSpacesListener, true);",
			"    this.kernelLogger = logger.getKernelLogger();",
			"  }",
			"  ",
			"  @DefaultValueSource",
			"  public void ensureDefaultSpaceDefinition(final UUID a, final UUID b, @DefaultValue(\"io.sarl.lang.tests.bug1028.Bug1028Class#ENSUREDEFAULTSPACEDEFINITION_0\") final Object c) {",
			"  }",
			"  ",
			"  public void removeDefaultSpaceDefinition(final UUID a, final UUID b) {",
			"  }",
			"  ",
			"  /**",
			"   * Default value for the parameter c",
			"   */",
			"  @Pure",
			"  @SyntheticMember",
			"  @SarlSourceCode(\"null\")",
			"  private final Object $DEFAULT_VALUE$ENSUREDEFAULTSPACEDEFINITION_0() {",
			"    return null;",
			"  }",
			"  ",
			"  @DefaultValueUse(\"java.util.UUID,java.util.UUID,java.lang.Object\")",
			"  @SyntheticMember",
			"  public final void ensureDefaultSpaceDefinition(final UUID a, final UUID b) {",
			"    ensureDefaultSpaceDefinition(a, b, $DEFAULT_VALUE$ENSUREDEFAULTSPACEDEFINITION_0());",
			"  }",
			"}",
			"");

	@Test
	@DisplayName("Overriding-code parsing")
	@Tag("sarlParsing")
	def parsing02 : void {
		val mas = file(getParseHelper, SARL_CODE_02);
		val validator = validate(getValidationHelper, getInjector, mas)
		validator.assertNoErrors
	}

	@Test
	@DisplayName("Overriding-code transformation")
	@Tag("compileToJava")
	def compiling02 : void {
		getCompileHelper().compile(SARL_CODE_02) [
			val actual = it.getGeneratedCode("io.sarl.lang.tests.bug1028.Bug1028Class")
			JAVA_CODE_02.assertEquals(actual)
		]
	}

	val SARL_CODE_03 = multilineString(
			"package io.sarl.lang.tests.bug1028",
			"",
			"import com.google.inject.Injector",
			"import io.sarl.sre.boot.configs.SreConfig",
			"import io.sarl.sre.internal.Factories",
			"import io.sarl.sre.KernelScope",
			"import io.sarl.sre.services.context.Context",
			"import io.sarl.sre.services.context.ContextFactory",
			"import io.sarl.sre.services.context.MemoryBasedContextService",
			"import io.sarl.sre.services.logging.LoggingService",
			"import java.util.logging.Logger",
			"import java.util.Map",
			"import java.util.UUID",
			"import javax.inject.Provider",
			"import java.util.concurrent.locks.ReadWriteLock",
			"",
			"interface HazelcastInstance {",
			"  def getMap(name : String) : HazelcastMap<A, B> with A, B",
			"}",
			"interface MapEvent {",
			"}",
			"interface EntryEvent<A, B> extends Map.Entry<A, B> {",
			"}",
			"interface EntryListener<A, B> {",
			"  def entryAdded(^event : EntryEvent<A, B>)",
			"  def entryUpdated(^event : EntryEvent<A, B>)",
			"  def entryRemoved(^event : EntryEvent<A, B>)",
			"  def entryEvicted(^event : EntryEvent<A, B>)",
			"  def entryExpired(^event : EntryEvent<A, B>)",
			"  def mapCleared(^event : MapEvent)",
			"  def mapEvicted(^event : MapEvent)",
			"}",
			"interface HazelcastMap<A, B> extends Map<A, B> {",
			"  def addEntryListener(listener : EntryListener<A, B>, flag : boolean) : UUID",
			"}",
			"",
			"class Bug1028Class extends MemoryBasedContextService {",
			"  ",
			"  val hazelcastInstance : HazelcastInstance",
			"  val kernelLogger : Logger",
			"  val defaultSpacesListenerID : UUID",
			"  var defaultSpaces : HazelcastMap<UUID, UUID>",
			"  ",
			"  new(sreConfig : SreConfig, @KernelScope rootContext : Context,",
			"      injector : Injector, factory : ContextFactory,",
			"      iHazelcastInstance : HazelcastInstance,",
			"      distributedContextSpaceMapName : String,",
			"      logger : LoggingService,",
			"      factories : Provider<Factories>) {",
			"    super(rootContext, logger, injector, factory, factories);",
			"    ",
			"    hazelcastInstance = iHazelcastInstance;",
			"    defaultSpaces = this.hazelcastInstance.getMap(sreConfig.boot.rootContextID.toString());",
			"    this.defaultSpaces.putIfAbsent(rootContext.ID, rootContext.defaultSpace.spaceID.ID);",
			"    var defaultSpacesListener : EntryListener<UUID, UUID> = new EntryListener<UUID, UUID>() {",
			"      def entryAdded(^event : EntryEvent<UUID, UUID>) {",
			"        ensureDefaultSpaceDefinition(^event.key, ^event.value, null)",
			"      }",
			"      override entryUpdated(^event : EntryEvent<UUID, UUID>) {",
			"      }",
			"      override entryRemoved(^event : EntryEvent<UUID, UUID>) {",
			"        removeDefaultSpaceDefinition(^event.key, ^event.value)",
			"      }",
			"      override entryEvicted(^event : EntryEvent<UUID, UUID>) {",
			"      }",
			"      override entryExpired(^event : EntryEvent<UUID, UUID>) {",
			"      }",
			"      override mapCleared(^event : MapEvent) {",
			"      }",
			"      override mapEvicted(^event : MapEvent) {",
			"      }",
			"    }",
			"    defaultSpacesListenerID = defaultSpaces.addEntryListener(defaultSpacesListener, true)",
			"    kernelLogger = logger.getKernelLogger",
			"  }",
			"  ",
			"  def ensureDefaultSpaceDefinition(a : UUID, b : UUID, c : Object = null) {",
			"  }",
			"  def removeDefaultSpaceDefinition(a : UUID, b : UUID) {",
			"  }",
			"}");

	val JAVA_CODE_03 = multilineString(
			"package io.sarl.lang.tests.bug1028;",
			"",
			"import com.google.inject.Injector;",
			"import io.sarl.lang.annotation.DefaultValue;",
			"import io.sarl.lang.annotation.DefaultValueSource;",
			"import io.sarl.lang.annotation.DefaultValueUse;",
			"import io.sarl.lang.annotation.Injectable;",
			"import io.sarl.lang.annotation.SarlElementType;",
			"import io.sarl.lang.annotation.SarlSourceCode;",
			"import io.sarl.lang.annotation.SarlSpecification;",
			"import io.sarl.lang.annotation.SyntheticMember;",
			"import io.sarl.lang.tests.bug1028.EntryEvent;",
			"import io.sarl.lang.tests.bug1028.EntryListener;",
			"import io.sarl.lang.tests.bug1028.HazelcastInstance;",
			"import io.sarl.lang.tests.bug1028.HazelcastMap;",
			"import io.sarl.lang.tests.bug1028.MapEvent;",
			"import io.sarl.sre.KernelScope;",
			"import io.sarl.sre.boot.configs.SreConfig;",
			"import io.sarl.sre.internal.Factories;",
			"import io.sarl.sre.services.context.Context;",
			"import io.sarl.sre.services.context.ContextFactory;",
			"import io.sarl.sre.services.context.MemoryBasedContextService;",
			"import io.sarl.sre.services.logging.LoggingService;",
			"import java.util.UUID;",
			"import java.util.logging.Logger;",
			"import javax.inject.Provider;",
			"import org.eclipse.xtext.xbase.lib.Pure;",
			"",
			"@SarlSpecification(\"" + SARLVersion::SPECIFICATION_RELEASE_VERSION_STRING + "\")",
			"@SarlElementType(" + SarlPackage::SARL_CLASS + ")",
			"@Injectable",
			"@SuppressWarnings(\"all\")",
			"public class Bug1028Class extends MemoryBasedContextService {",
			"  private final HazelcastInstance hazelcastInstance;",
			"  ",
			"  private final Logger kernelLogger;",
			"  ",
			"  private final UUID defaultSpacesListenerID;",
			"  ",
			"  private HazelcastMap<UUID, UUID> defaultSpaces;",
			"  ",
			"  public Bug1028Class(final SreConfig sreConfig, @KernelScope final Context rootContext, final Injector injector, final ContextFactory factory, final HazelcastInstance iHazelcastInstance, final String distributedContextSpaceMapName, final LoggingService logger, final Provider<Factories> factories) {",
			"    super(rootContext, logger, injector, factory, factories);",
			"    this.hazelcastInstance = iHazelcastInstance;",
			"    this.defaultSpaces = this.hazelcastInstance.<UUID, UUID>getMap(sreConfig.getBoot().getRootContextID().toString());",
			"    this.defaultSpaces.putIfAbsent(rootContext.getID(), rootContext.getDefaultSpace().getSpaceID().getID());",
			"    EntryListener<UUID, UUID> defaultSpacesListener = new EntryListener<UUID, UUID>() {",
			"      public void entryAdded(final EntryEvent<UUID, UUID> event) {",
			"        Bug1028Class.this.ensureDefaultSpaceDefinition(event.getKey(), event.getValue(), null);",
			"      }",
			"      ",
			"      @Override",
			"      public void entryUpdated(final EntryEvent<UUID, UUID> event) {",
			"      }",
			"      ",
			"      @Override",
			"      public void entryRemoved(final EntryEvent<UUID, UUID> event) {",
			"        Bug1028Class.this.removeDefaultSpaceDefinition(event.getKey(), event.getValue());",
			"      }",
			"      ",
			"      @Override",
			"      public void entryEvicted(final EntryEvent<UUID, UUID> event) {",
			"      }",
			"      ",
			"      @Override",
			"      public void entryExpired(final EntryEvent<UUID, UUID> event) {",
			"      }",
			"      ",
			"      @Override",
			"      public void mapCleared(final MapEvent event) {",
			"      }",
			"      ",
			"      @Override",
			"      public void mapEvicted(final MapEvent event) {",
			"      }",
			"    };",
			"    this.defaultSpacesListenerID = this.defaultSpaces.addEntryListener(defaultSpacesListener, true);",
			"    this.kernelLogger = logger.getKernelLogger();",
			"  }",
			"  ",
			"  @DefaultValueSource",
			"  public void ensureDefaultSpaceDefinition(final UUID a, final UUID b, @DefaultValue(\"io.sarl.lang.tests.bug1028.Bug1028Class#ENSUREDEFAULTSPACEDEFINITION_0\") final Object c) {",
			"  }",
			"  ",
			"  public void removeDefaultSpaceDefinition(final UUID a, final UUID b) {",
			"  }",
			"  ",
			"  /**",
			"   * Default value for the parameter c",
			"   */",
			"  @Pure",
			"  @SyntheticMember",
			"  @SarlSourceCode(\"null\")",
			"  private final Object $DEFAULT_VALUE$ENSUREDEFAULTSPACEDEFINITION_0() {",
			"    return null;",
			"  }",
			"  ",
			"  @DefaultValueUse(\"java.util.UUID,java.util.UUID,java.lang.Object\")",
			"  @SyntheticMember",
			"  public final void ensureDefaultSpaceDefinition(final UUID a, final UUID b) {",
			"    ensureDefaultSpaceDefinition(a, b, $DEFAULT_VALUE$ENSUREDEFAULTSPACEDEFINITION_0());",
			"  }",
			"}",
			"");

	@Test
	@DisplayName("Partial-overriding-code parsing")
	@Tag("sarlParsing")
	def parsing03 : void {
		val mas = file(getParseHelper, SARL_CODE_03);
		val validator = validate(getValidationHelper, getInjector, mas)
		validator.assertNoErrors
	}

	@Test
	@DisplayName("Partial-overriding-code transformation")
	@Tag("compileToJava")
	def compiling03 : void {
		getCompileHelper().compile(SARL_CODE_03) [
			val actual = it.getGeneratedCode("io.sarl.lang.tests.bug1028.Bug1028Class")
			JAVA_CODE_03.assertEquals(actual)
		]
	}

}
