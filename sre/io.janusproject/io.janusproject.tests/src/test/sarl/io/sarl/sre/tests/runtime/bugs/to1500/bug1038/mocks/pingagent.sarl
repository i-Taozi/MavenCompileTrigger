/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.bugs.to1500.bug1038.mocks

import io.sarl.core.AgentKilled
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.Schedules
import io.sarl.sre.test.framework.skills.TestingCapacity
import io.sarl.sre.test.framework.skills.TestingSkill
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicReference

@SuppressWarnings("all")
agent PingAgent {

	uses DefaultContextInteractions, Behaviors, Schedules, ExternalContextAccess
	uses InnerContextAccess, Lifecycle
	uses TestingCapacity

	var comSpace = new AtomicReference<OpenEventSpace>
	var maxIteration : int
	var level : int

	val ready = new AtomicBoolean(false)

	on Initialize {
		setSkill(new TestingSkill(occurrence))
		this.maxIteration = getParam(0)
		this.level = getParam(1)

		val sharedSpaceId = UUID::randomUUID
		this.comSpace.set(defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification), sharedSpaceId))
		this.comSpace.get.registerStrongParticipant(asEventListener)
		
		val task = "rendez-vous".task
		task.every(500) [
			if (this.ready.get) {
				task.cancel
			} else {
				new RendezVous(sharedSpaceId).emit [it.ID != this.ID]
			}
		]
	}

	on RendezVousAccepted {
		this.ready.set(true)
		this.comSpace.get.emit(new Ping) [it.ID != this.ID]
	}

	on Pong [occurrence.isInSpace(this.comSpace.get)] {
		if (this.level < this.maxIteration) {
			val ic = innerContext
			typeof(PingAgent).spawnInContext(ic,
				buildAgentInitializationParameters(
					this.maxIteration,
					this.level + 1))
			this.comSpace.get.emit(new JoinContextQuery(ic.ID, ic.defaultSpace.spaceID.ID)) [
				it.ID == occurrence.source.ID
			]
		} else {
			emit(new Bye)
		}
	}

	on Bye {
		"LeafPingFinished".addResult
		killMe
	}

	on AgentKilled {
		if (!hasMemberAgent) {
			killMe
		}
	}

}
