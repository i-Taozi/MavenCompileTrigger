/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2015 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar io.sarl.lang.SARL with org.eclipse.xtend.core.Xtend

generate sarl "http://www.sarl.io/lang/SARL"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvm
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtend" as xtend

SarlScript returns xtend::XtendFile:
	{SarlScript}
	('package' package=QualifiedName ';'?)?
	importSection=XImportSection?
	xtendTypes+=Type*
;

@Override 
Type returns xtend::XtendTypeDeclaration:
	{xtend::XtendTypeDeclaration} annotations+=XAnnotation*
	(	// Event
		{SarlEvent.annotationInfo = current}
		modifiers += CommonModifier*
	    'event' name=ValidID ('extends' extends=JvmParameterizedTypeReference)? 
	    ('{' members+=EventMember* '}')?
	|
		// Capacity
		{SarlCapacity.annotationInfo = current}
		modifiers+=CommonModifier*
		'capacity' name=ValidID
		('extends' extends+=JvmParameterizedTypeReference
		( ',' extends+=JvmParameterizedTypeReference )* )? 
		'{' members+=CapacityMember* '}'
	|
		// Agent
		{SarlAgent.annotationInfo = current}
		modifiers+=CommonModifier*
		'agent' name=ValidID 
		('extends' extends=JvmParameterizedTypeReference)?
		'{' members+=AOPMember* '}'
	|
		// Behavior
		{SarlBehavior.annotationInfo = current}
		modifiers+=CommonModifier*
		'behavior' name=ValidID ('extends' extends=JvmParameterizedTypeReference)?
		'{' members+=AOPMember* '}'
	|
		// Skill
		{SarlSkill.annotationInfo = current}
		modifiers+=CommonModifier*
		'skill' name=ValidID 
		(	('extends' extends=JvmParameterizedTypeReference)?
			&
			('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?
		)
		'{' members+=AOPMember* '}'
	|
		// Space
		{SarlSpace.annotationInfo = current}
		modifiers+=CommonModifier*
		'space' name=ValidID '{' '}'
	|
		// Artifact
		{SarlArtifact.annotationInfo = current}
		modifiers+=CommonModifier*
		'artifact' name=ValidID '{' '}'
	|
		// Class
		{SarlClass.annotationInfo = current}
		modifiers+=CommonModifier*
		'class' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
		(	('extends' extends=JvmParameterizedTypeReference)? 
			&
			('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?
		)
		'{' members+=Member* '}'
	|
		// Interface
		{SarlInterface.annotationInfo = current}
		modifiers+=CommonModifier*
		'interface' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
		('extends' extends+=JvmParameterizedTypeReference (',' extends+=JvmParameterizedTypeReference)*)?
		'{' (members+=Member)* '}'
	|
		// Enum
		{SarlEnumeration.annotationInfo = current}
		modifiers+=CommonModifier*
		'enum' name=ValidID '{'   
   		(members+=XtendEnumLiteral (',' members+=XtendEnumLiteral)*)? ';'?
		'}'
	|
		// AnnotationType
		{SarlAnnotationType.annotationInfo = current}
		modifiers+=CommonModifier*
		'annotation' name=ValidID
		'{' members+=AnnotationField* '}'
	)
;

EventMember returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation*
	(
		// Field
		{SarlField.annotationInfo = current}
		modifiers+=CommonModifier*
		(
			modifiers += 'extension'
			(modifiers+=FieldModifier | modifiers+=CommonModifier)*
			name=ValidID ':' type=JvmTypeReference 
		|
			modifiers+=FieldModifier
			modifiers+=CommonModifier*
			(
				modifiers += 'extension'
				name=ValidID ':' type=JvmTypeReference
			|
				name=ValidID (':' type=JvmTypeReference)?
			) 
		)
		('=' initialValue=XExpression)? ';'?
	|
		// Constructor
		{SarlConstructor.annotationInfo = current}
		modifiers+=CommonModifier*
		'new'
		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')')?
		( ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		  &
		  ('with' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)*)?
		)
		expression=XBlockExpression
	)
;

CapacityMember returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation*
	{SarlAction.annotationInfo = current}
	modifiers+=CommonModifier*
	modifiers+=MethodModifier
	modifiers+=CommonModifier* 
	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	name=FunctionID
	( '(' (parameters+=Parameter (',' parameters+=Parameter)* )? ')' )?
	( ':'
	  (	(returnType=TypeReferenceWithTypeArgs)
	  	| (returnType=TypeReferenceNoTypeArgs) )
	)?
	(	('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		&
		('fires' firedEvents+=JvmTypeReference (',' firedEvents+=JvmTypeReference)*)?
		&
		('with' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)*)?
	)
	(expression=XBlockExpression | ';')?
;

// Members for agent-oriented types
AOPMember returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation*
	(
		// Behavior Unit
		{SarlBehaviorUnit.annotationInfo = current}
		'on' name=JvmParameterizedTypeReference ('[' guard=XExpression ']')?
		expression=XBlockExpression
	|
		// Capacity Uses
		{SarlCapacityUses.annotationInfo = current}
		'uses' capacities+=JvmParameterizedTypeReference
		(',' capacities+=JvmParameterizedTypeReference)* ';'?
	|
		// Required capacities
		{SarlRequiredCapacity.annotationInfo = current}
		'requires' capacities+=JvmParameterizedTypeReference
		(',' capacities+=JvmParameterizedTypeReference)* ';'?
	|
		// Field
		{SarlField.annotationInfo = current}
		modifiers+=CommonModifier*
		(
			modifiers += 'extension'
			(modifiers+=FieldModifier | modifiers+=CommonModifier)*
			name=ValidID ':' type=JvmTypeReference 
		|
			modifiers+=FieldModifier
			modifiers+=CommonModifier*
			(
				modifiers += 'extension'
				name=ValidID ':' type=JvmTypeReference
			|
				name=ValidID (':' type=JvmTypeReference)?
			) 
		)
		('=' initialValue=XExpression)? ';'?
	|
		// Constructor
		{SarlConstructor.annotationInfo = current} modifiers+=CommonModifier*
		'new'
		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		('(' (parameters+=Parameter (',' parameters+=Parameter)*)?
		  ')'
		)?
		( ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		  &
		  ('with' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)*)?
		)
		expression=XBlockExpression
	|
		// Action
		{SarlAction.annotationInfo = current} modifiers+=CommonModifier*
		modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)*
		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		name=FunctionID
		(
			'('
			(	parameters+=Parameter
				(',' parameters+=Parameter)* 
			)?
			')'
		)?
		( ':'
		  (	(returnType=TypeReferenceWithTypeArgs)
		  	| (returnType=TypeReferenceNoTypeArgs) )
		)?
		(	('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
			&
			('fires' firedEvents+=JvmTypeReference (',' firedEvents+=JvmTypeReference)*)?
			&
			('with' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)*)?
		)
		(expression=XBlockExpression | ';')?
	|
		// Class
		{SarlClass.annotationInfo = current} modifiers+=CommonModifier*
		'class' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
		(	('extends' extends=JvmParameterizedTypeReference)?
			&
			('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?
		)
		'{' members+=Member* '}'
	|
		// Interface
		{SarlInterface.annotationInfo = current} modifiers+=CommonModifier*
		'interface' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
		('extends' extends+=JvmParameterizedTypeReference (',' extends+=JvmParameterizedTypeReference)*)?
		'{' members+=Member* '}'
	|
		// Enum
		{SarlEnumeration.annotationInfo = current} modifiers+=CommonModifier*
		'enum' name=ValidID '{'   
   		(members+=XtendEnumLiteral (',' members+=XtendEnumLiteral)*)? ';'?
		'}'
	|
		// AnnotationType
		{SarlAnnotationType.annotationInfo = current} modifiers+=CommonModifier*
		'annotation' name=ValidID
		'{' members+=AnnotationField* '}'
	)
;

// Members for the object-oriented types
@Override 
Member returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation*
	(
		// Field
		{SarlField.annotationInfo = current}
		modifiers+=CommonModifier*
		(
			modifiers += 'extension'
			(modifiers+=FieldModifier | modifiers+=CommonModifier)*
			name=ValidID ':' type=JvmTypeReference 
		|
			modifiers+=FieldModifier
			modifiers+=CommonModifier*
			(
				modifiers += 'extension'
				name=ValidID ':' type=JvmTypeReference
			|
				name=ValidID (':' type=JvmTypeReference)?
			) 
		)
		('=' initialValue=XExpression)? ';'?
	|
		// Constructor
		{SarlConstructor.annotationInfo = current} modifiers+=CommonModifier*
		'new'
		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		('(' (parameters+=Parameter (',' parameters+=Parameter)*)?
		  ')'
		)?
		( ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		  &
		  ('with' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)*)?
		)
		expression=XBlockExpression
	|
		// Action
		{SarlAction.annotationInfo = current} modifiers+=CommonModifier*
		modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)*
		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		name=FunctionID
		(
			'('
			(	parameters+=Parameter
				(',' parameters+=Parameter)* 
			)?
			')'
		)?
		( ':'
		  (	(returnType=TypeReferenceWithTypeArgs)
		  	| (returnType=TypeReferenceNoTypeArgs) )
		)?
		(	('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
			&
			('fires' firedEvents+=JvmTypeReference (',' firedEvents+=JvmTypeReference)*)?
			&
			('with' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)*)?
		)
		(expression=XBlockExpression | ';')?
	|
		// Class
		{SarlClass.annotationInfo = current} modifiers+=CommonModifier*
		'class' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
		(	('extends' extends=JvmParameterizedTypeReference)?
			&
			('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?
		)
		'{' members+=Member* '}'
	|
		// Interface
		{SarlInterface.annotationInfo = current} modifiers+=CommonModifier*
		'interface' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
		('extends' extends+=JvmParameterizedTypeReference (',' extends+=JvmParameterizedTypeReference)*)?
		'{' members+=Member* '}'
	|
		// Enum
		{SarlEnumeration.annotationInfo = current} modifiers+=CommonModifier*
		'enum' name=ValidID '{'   
   		(members+=XtendEnumLiteral (',' members+=XtendEnumLiteral)*)? ';'?
		'}'
	|
		// AnnotationType
		{SarlAnnotationType.annotationInfo = current} modifiers+=CommonModifier*
		'annotation' name=ValidID
		'{' members+=AnnotationField* '}'
	)
;

@Override 
AnnotationField returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation*
	(
		// Annotation Field
		{SarlField.annotationInfo = current}
		modifiers+=CommonModifier*
		modifiers+=FieldModifier
		modifiers+=CommonModifier*
		name=ValidID
		(':' type=JvmTypeReference)? 
		('=' initialValue=XAnnotationElementValue)? ';'?
	|
		// Class
		{SarlClass.annotationInfo = current}
		modifiers+=CommonModifier*
		'class' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
		(	('extends' extends=JvmParameterizedTypeReference)?
			&
			('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?
		)
		'{' members+=Member* '}'
	|
		// Interface
		{SarlInterface.annotationInfo = current}
		modifiers+=CommonModifier*
		'interface' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
		('extends' extends+=JvmParameterizedTypeReference (',' extends+=JvmParameterizedTypeReference)*)?
		'{' members+=Member* '}'
	|
		// Enum
		{SarlEnumeration.annotationInfo = current}
		modifiers+=CommonModifier*
		'enum' name=ValidID '{'   
   		(members+=XtendEnumLiteral (',' members+=XtendEnumLiteral)*)? ';'?
		'}'
	|
		// AnnotationType
		{SarlAnnotationType.annotationInfo = current}
		modifiers+=CommonModifier*
		'annotation' name=ValidID
		'{' members+=AnnotationField* '}'
	)
;

@Override 
Parameter returns xtend::XtendParameter:
	{SarlFormalParameter} annotations+=XAnnotation*
	(extension?='extension' annotations+=XAnnotation*)?
	name=ValidID ':' parameterType=JvmTypeReference 
	(   (varArg?='*')
	  | ('=' defaultValue=XExpression))?
;

@Override 
XtendEnumLiteral returns xtend::XtendEnumLiteral:
	{SarlEnumLiteral}
	name=ValidID
;

BreakExpression returns xbase::XExpression :
	{SarlBreakExpression}
	'break'
;

ContinueExpression returns xbase::XExpression :
	{SarlContinueExpression}
	'continue'
;

AssertExpression returns xbase::XExpression :
	{SarlAssertExpression}
	'assert' (->condition=XExpression) (->',' message=STRING)?
;

AssumeExpression returns xbase::XExpression :
	{SarlAssertExpression}
	isStatic?='assume' (->condition=XExpression) (->',' message=STRING)?
;

SarlCastedExpression returns xbase::XCastedExpression:
	{SarlCastedExpression} feature = [jvm::JvmIdentifiableElement|IdOrSuper]?
;

@Override
XCastedExpression returns xbase::XExpression:
	// The inheritance and fields of SarlCastedExpression is manually defined into the Ecore model.
	XExponentExpression (=>({SarlCastedExpression.target=current} 'as') type=JvmTypeReference)*
;

//-----------------------------------------------
// BELOW THIS POINT, THE RULES FROM XTEXT ARE OVERLOADED

// Variable declaration according to the SARL syntax (not the Xtext/Xtend)
@Override 
XPrimaryExpression returns xbase::XExpression:
	// Below the SARL specific expressions
	BreakExpression |
	ContinueExpression |
	AssertExpression |
	AssumeExpression |
	// Below the expressions inherited from Xtext/Xtend
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XSynchronizedExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XBasicForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression
;

@Override 
XVariableDeclaration returns xbase::XExpression:
	=>({xtend::XtendVariableDeclaration}
	(
		(
			(writeable?='var'|'val')
			extension?='extension'?
		)
	|
		(extension?='extension' (writeable?='var'|'val'))
	))
	name=ValidID
	(':' type=JvmTypeReference)?
	('=' right=XExpression)?
;

// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
@Override 
JvmFormalParameter returns xtend::XtendFormalParameter:
	extension?='extension'? name=ValidID (=> ':' (parameterType=JvmTypeReference))?
;
	
// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
@Override 
FullJvmFormalParameter returns xtend::XtendFormalParameter:
	extension?='extension'? name=ValidID ':' parameterType=MultiTypeReference
;

// The type of the for-loop's variable is following the SARL syntax (not the Xtext/Xtend)
@Override 
XForLoopExpression returns xbase::XExpression:
	=>({xbase::XForLoopExpression}
	'for' '(' declaredParam=SarlXLoopFormalParameter ':') forExpression=XExpression ')'
	( eachExpression=XExpression | ';' )
;
// The following rule is not provided by Xbase, but we use it
// in the overloaded version of XForLoopExpression
SarlXLoopFormalParameter returns xtend::XtendFormalParameter:
	{xtend::XtendFormalParameter}
	(extension?='extension'?) name=ValidID
	( 'as' parameterType=JvmTypeReference )?
;

// The type of the switch's variable is following the SARL syntax (not the Xtext/Xtend)
@Override 
XSwitchExpression returns xbase::XExpression:
	{xbase::XSwitchExpression}
	'switch' (=>('(' declaredParam=JvmFormalParameter '=') switch=XExpression ')'
		| =>(declaredParam=JvmFormalParameter '=')? switch=XExpression) '{'
	(cases+=XCasePart)*
	('default' ':' default=XExpression )?
	'}'
;

//-----------------------------------------------
// BELOW THIS POINT, See Issue #793 and #846
// FIXME Remove When issue 68 is fixed within Xbase, https://github.com/eclipse/xtext-lib/issues/68
// FIXME Remove when issue 67 is fixed within Xbase, https://github.com/eclipse/xtext-lib/issues/67

// CAUTION: The rule XCastedExpression is redefined above for the support of the SARL cast operator.
@Override
XMultiplicativeExpression returns xbase::XExpression:
	XCastedExpression (=>({xbase::XBinaryOperation.leftOperand=current}
		feature=[jvm::JvmIdentifiableElement|OpMulti]
	) rightOperand=XCastedExpression)*
;

@Override
OpMulti:
	'*' | '/' | '%'
;

XExponentExpression returns xbase::XExpression:
	XUnaryOperation
 	(=>({xbase::XBinaryOperation.leftOperand=current} feature=[jvm::JvmIdentifiableElement|OpExponent])
		rightOperand=XUnaryOperation
	)*
;

OpExponent:
	"**"
;

@Override
XUnaryOperation returns xbase::XExpression:
	{xbase::XUnaryOperation} feature=[jvm::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	| XPostfixOperation
;

@Override
OpUnary:
	"!" | "-" | "+"
;

