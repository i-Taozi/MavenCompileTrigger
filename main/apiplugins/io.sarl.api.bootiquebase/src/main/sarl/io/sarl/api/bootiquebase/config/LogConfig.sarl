/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.bootiquebase.config

import com.google.inject.AbstractModule
import com.google.inject.Injector
import com.google.inject.Module
import com.google.inject.Provides
import com.google.inject.Singleton
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.config.ConfigurationFactory
import io.bootique.meta.application.OptionMetadata
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import java.util.Objects
import java.util.logging.Level
import java.util.logging.Logger
import org.arakhne.afc.bootique.variables.VariableDecls
import org.arakhne.afc.bootique.variables.VariableNames

import static io.sarl.api.bootiquebase.config.LogConfig.*

import static extension io.bootique.BQCoreModule.extend

/** 
 * Configuration for the loggers.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
@BQConfig("Configuration of the loggers")
class LogConfig implements Comparable<LogConfig> {

	/** 
	 * Prefix for the configuration entries of the logger modules.
	 */
	public static val PREFIX = "log"

	/**
	 * Name of the property that contains the logging level.
	 */
	public static val LEVEL = PREFIX + ".level"

	/** 
	 * Default value for the property that contains the logging level.
	 */
	public static val DEFAULT_LEVEL = Level::INFO

	/**
	 * Name of the property that contains the log format.
	 */
	public static val LOG_FORMAT = PREFIX + ".logFormat"

	/** Default conversion pattern for the logger.
	 */
	public static val DEFAULT_LOG_FORMAT = "%-5p %m%n"

	var level : LogLevel 

	var logFormat : String

	/** Replies the configuration factory for the logging.
	 *
	 * @param configFactory the general configuration factory.
	 * @return the logging configuration factory.
	 */
	static def getConfiguration(configFactory : ConfigurationFactory) : LogConfig {
		assert configFactory !== null
		return configFactory.config(typeof(LogConfig), PREFIX)
	}

	/** Replies the level.
	 *
	 * @return the level.
	 * @see #getJulLevel()
	 */
	def getLevel : LogLevel {
		if (this.level === null) {
			this.level = new LogLevel(DEFAULT_LEVEL)
		}
		return this.level
	}

	/** Replies the JUL level.
	 * 
	 * @return the level.
	 * @see #getLevel()
	 */
	def getJulLevel : Level {
		getLevel.getJul
	}

	/** Change the level.
	 * 
	 * @param level the level.
	 */
	@BQConfigProperty("Logging level of a given logger and its children.")
	def setLevel(level : LogLevel) : void {
		this.level = level
	}

	/** Change the level.
	 * 
	 * @param level the level.
	 */
	def setJulLevel(level : Level) : void {
		if (level === null) {
			setLevel(null)
		} else {
			setLevel(new LogLevel(level))
		}
	}

	/** Configure the given logger from the configuration.
	 * 
	 * @param logger the logger to configure.
	 * @return the logger.
	 */
	def configureLogger(logger : Logger) : Logger {
		val format = getLogFormat
		if (!format.isNullOrEmpty) {
			/*final Enumeration<? extends Appender> allAppenders  = logger.getAllAppenders();
			while (allAppenders.hasMoreElements()) {
				final Appender appender = allAppenders.nextElement();
				appender.setLayout(new PatternLayout(format));
			}*/
		}
		logger.level = getLevel.getJul
		return logger
	}

	/** Configure the given logger from the configuration.
	 * 
	 * @param loggerName the name of the logger to configure.
	 * @return the logger.
	 */
	def configureLogger(loggerName : String) : Logger {
		return configureLogger(Logger::getLogger(loggerName))
	}

	/** Replies the format of the log.
	 * 
	 * @return the format, never {@code null}.
	 */
	def getLogFormat : String {
		if (this.logFormat === null) {
			this.logFormat = DEFAULT_LOG_FORMAT
		}
		return this.logFormat
	}

	/** Change the format of the log.
	 * 
	 * @param format the format.
	 */
	@BQConfigProperty("Log format specification used by child appenders unless redefined at the appender level, or not relevant for a given type of appender. The spec is compatible with Log4j framework. Default format is '" +
		DEFAULT_LOG_FORMAT + "'.")
	def setLogFormat(format : String) : void {
		this.logFormat = format
	}

	override toString : String {
		Objects::toString(this.level)
	}

	override equals(obj : Object) : boolean {
		if (obj instanceof LogConfig) {
			return this.level == obj.getLevel
		}
		return false
	}

	override hashCode : int {
		this.level === null ? 0 : this.level.hashCode
	}

	override compareTo(o : LogConfig) : int {
		if (o === null) {
			return 1
		}
		if (this.level === o.level) {
			return 0
		}
		if (this.level === null) {
			return if (o.level === null) 0 else -1
		}
		if (o.level === null) {
			return 1
		}
		return this.level.intValue <=> o.level.intValue
	}

}

/** 
 * Module for creating and configuring the loggers.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class LogConfigModule extends AbstractModule {

	/** Name of the command-line option.
	 */
	public static val LOG_LONG_OPTION = "log"
	
	override configure : void {
		VariableDecls.extend(binder()).declareVar(LogConfig::LEVEL);
		val cpDescription = MessageFormat::format(Messages::LogConfigModule_0,
				VariableNames.toEnvironmentVariableName(LogConfig::LEVEL),
				LOG_LONG_OPTION,
				LogLevel::toJsonString(DEFAULT_LEVEL),
				LogLevel::getAllJsonLabels(true))
		binder.extend.addOption(
				OptionMetadata.builder(LOG_LONG_OPTION, cpDescription)
				.valueRequired(Messages::LogConfigModule_1)
				.build)
				.mapConfigPath(LOG_LONG_OPTION, LogConfig::LEVEL)
	}

	/** Replies the instance of the logger configuration.
	 * 
	 * @param configFactory accessor to the bootique factory.
	 * @param injector the current injector.
	 * @return the path configuration accessor.
	 */
	@Provides
	@Singleton
	def provideLogConfig(configFactory : ConfigurationFactory, injector : Injector) : LogConfig {
		val config = LogConfig::getConfiguration(configFactory)
		injector.injectMembers(config)
		return config
	}

}

/** Provider of the module for creating and configuring loggers.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class LogConfigModuleProvider implements BQModuleProvider {

	override module : Module {
		return new LogConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(LogConfig::PREFIX, typeof(LogConfig))
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::LogConfigModuleProvider_0)
	}

}

