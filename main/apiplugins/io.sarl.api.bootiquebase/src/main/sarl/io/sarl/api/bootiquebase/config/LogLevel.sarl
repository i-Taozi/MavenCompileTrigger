/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.api.bootiquebase.config

import java.util.logging.Level
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonValue

/** 
 * Logging level that is dedicated to be compatible with the configuration files, e.g. Json.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class LogLevel {

	/** Json label that is used for representing error messages, and synonym of "severe". */
	public static val ERROR = "error"

	/** Json label that is used for representing error messages, and synonym of "severe". */
	public static val CRITICAL = "critical"

	/** Json label that is used for representing debug messages, and synonym of "finer". */
	public static val DEBUG = "debug"

	val level : Level

	/** Constructor.
	 *
	 * @param lvl the JUL level.
	 */
	new (lvl : Level) {
		assert lvl !== null
		this.level = lvl
	}

	/** Parse the given string to obtain a log level.
	 * 
	 * @param name the string to parse.
	 * @return the log level.
	 */
	@JsonCreator
	@Pure
	static def fromJson(name : String) : LogLevel {
		if (name.isNullOrEmpty) {
			throw new NullPointerException("Name is null")
		}
		var lvl : Level = null
		switch (name) {
			case ERROR,
			case CRITICAL: {
				lvl = Level::SEVERE
			}
			case DEBUG: {
				lvl = Level::FINER
			}
			default: {
				try {
					lvl = Level::parse(name.toUpperCase)
				} catch (exception : Throwable) {
					lvl = null
				}
				if (lvl === null) {
					lvl = LogConfig::DEFAULT_LEVEL
				}
			}
		}
		return new LogLevel(lvl)
	}

	/** Replies the Json representation of the given level.
	 *
	 * @param level the JUL level.
	 * @param allowSynonyms indicates of the synonyms of levels should be considered.
	 * @return the json representation.
	 */
	static def toJsonString(level : Level, allowSynonyms : boolean = true) : String {
		if (allowSynonyms) {
			switch (level) {
				case Level::SEVERE: {
					return ERROR
				}
				case Level::FINER: {
					return DEBUG
				}
			}
		}
		return level.name.toLowerCase
	}

	/** Replies the preferred string representation of the level within a Json stream.
	 * 
	 * @return the string representation of the level.
	 */
	@JsonValue
	@Pure
	def toJsonString : String {
		this.level.toJsonString
	}

	/** Replies the JUL level associated to this logging level.
	 * 
	 * @return the JUL level
	 */
	@Pure
	def getJul : Level  {
		this.level
	}

	/** Replies int representation of this level.
	 * 
	 * @return the int representation of this level.
	 */
	@Pure
	def intValue : int {
		this.level.intValue
	}

	/** Replies all the available labels for the log levels.
	 *
	 * @param synonyms indicates if synonyms are added into the replied values (separated by slashes).
	 * @return the log level labels separated by comas.
	 */
	@Pure
	static def getAllJsonLabels(synonyms : boolean) : String {
		val labels = new StringBuilder
		labels.append(toJsonString(Level::OFF, false)).append(", ")
		labels.append(ERROR)
		if (synonyms) {
			labels.append("/").append(CRITICAL).append("/").append(toJsonString(Level::SEVERE, false))
		}
		labels.append(", ")
		labels.append(toJsonString(Level::WARNING, false)).append(", ")
		labels.append(toJsonString(Level::INFO, false)).append(", ")
		labels.append(toJsonString(Level::CONFIG, false)).append(", ")
		labels.append(toJsonString(Level::FINE, false)).append(", ")
		labels.append(DEBUG)
		if (synonyms) {
			labels.append("/").append(toJsonString(Level::FINER, false))
		}
		labels.append(", ")
		labels.append(toJsonString(Level::FINEST, false)).append(", ")
		labels.append(toJsonString(Level::ALL, false))
		return labels.toString
	}

}
