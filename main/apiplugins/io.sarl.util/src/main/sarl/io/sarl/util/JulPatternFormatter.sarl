/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2021 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.util

import java.io.PrintWriter
import java.io.StringWriter
import java.util.Date
import java.util.logging.Formatter
import java.util.logging.LogRecord

/** JUL formatter based on pattern.
 *
 * <p>The format string may contains one of the following elements:<ul>
 * <li><code>%1</code>: the date,</li>
 * <li><code>%2</code>: the name of the calling function,</li>
 * <li><code>%3</code>: the name of the logger,</li>
 * <li><code>%4</code>: the logging level,</li>
 * <li><code>%5</code>: the message, and</li>
 * <li><code>%6</code>: the throwable.</li>
 * </ul>
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.12
 */
class JulPatternFormatter extends Formatter {

	val pattern : String

    val dat = new Date

    /** Constructor.
     *
     * @param pattern the pattern that is compatible with {@link String#format(String, Object...)}.
     */
	new (pattern : String) {
		assert !pattern.isNullOrEmpty
		this.pattern = pattern
	}

	override format(record : LogRecord) : String {
		this.dat.time = record.millis
		val source = new StringBuilder
		val scn = record.sourceClassName
		val logName = record.loggerName
		if (!scn.isNullOrEmpty) {
			source.append(scn)
			val smn = record.sourceMethodName
			if (!smn.isNullOrEmpty) {
				source.append(" ")
				source.append(smn)
            }
		} else {
			source.append(logName)
		}
		val message = record.formatMessage
		var throwable : String
		if (record.thrown !== null) {
            val sw = new StringWriter
			try (var pw = new PrintWriter(sw)) {
				pw.println
				record.thrown.printStackTrace(pw)
			}
			throwable = sw.toString
		} else {
			throwable = ""
		}
		return String.format(
			this.pattern,
			this.dat, source,
			logName.filterLogName,
			record.level.localizedName,
			message,
			throwable)
	}

	/** Filter the log name in order to computer the one that is displayed into the log.
	 *
	 * @param logName the log name to filter.
	 * @return the displayable log name.
	 */
	protected def filterLogName(logName : String) : String {
		logName
	}
	
}
