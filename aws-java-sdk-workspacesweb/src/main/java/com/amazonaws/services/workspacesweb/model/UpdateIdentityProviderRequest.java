/*
 * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 * 
 * http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
package com.amazonaws.services.workspacesweb.model;

import java.io.Serializable;
import javax.annotation.Generated;

import com.amazonaws.AmazonWebServiceRequest;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/workspaces-web-2020-07-08/UpdateIdentityProvider"
 *      target="_top">AWS API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateIdentityProviderRequest extends com.amazonaws.AmazonWebServiceRequest implements Serializable, Cloneable {

    /**
     * <p>
     * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency
     * ensures that an API request completes only once. With an idempotent request, if the original request completes
     * successfully, subsequent retries with the same client token return the result from the original successful
     * request.
     * </p>
     * <p>
     * If you do not specify a client token, one is automatically generated by the AWS SDK.
     * </p>
     */
    private String clientToken;
    /**
     * <p>
     * The ARN of the identity provider.
     * </p>
     */
    private String identityProviderArn;
    /**
     * <p>
     * The details of the identity provider.
     * </p>
     */
    private java.util.Map<String, String> identityProviderDetails;
    /**
     * <p>
     * The name of the identity provider.
     * </p>
     */
    private String identityProviderName;
    /**
     * <p>
     * The type of the identity provider.
     * </p>
     */
    private String identityProviderType;

    /**
     * <p>
     * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency
     * ensures that an API request completes only once. With an idempotent request, if the original request completes
     * successfully, subsequent retries with the same client token return the result from the original successful
     * request.
     * </p>
     * <p>
     * If you do not specify a client token, one is automatically generated by the AWS SDK.
     * </p>
     * 
     * @param clientToken
     *        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency
     *        ensures that an API request completes only once. With an idempotent request, if the original request
     *        completes successfully, subsequent retries with the same client token return the result from the original
     *        successful request. </p>
     *        <p>
     *        If you do not specify a client token, one is automatically generated by the AWS SDK.
     */

    public void setClientToken(String clientToken) {
        this.clientToken = clientToken;
    }

    /**
     * <p>
     * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency
     * ensures that an API request completes only once. With an idempotent request, if the original request completes
     * successfully, subsequent retries with the same client token return the result from the original successful
     * request.
     * </p>
     * <p>
     * If you do not specify a client token, one is automatically generated by the AWS SDK.
     * </p>
     * 
     * @return A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
     *         Idempotency ensures that an API request completes only once. With an idempotent request, if the original
     *         request completes successfully, subsequent retries with the same client token return the result from the
     *         original successful request. </p>
     *         <p>
     *         If you do not specify a client token, one is automatically generated by the AWS SDK.
     */

    public String getClientToken() {
        return this.clientToken;
    }

    /**
     * <p>
     * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency
     * ensures that an API request completes only once. With an idempotent request, if the original request completes
     * successfully, subsequent retries with the same client token return the result from the original successful
     * request.
     * </p>
     * <p>
     * If you do not specify a client token, one is automatically generated by the AWS SDK.
     * </p>
     * 
     * @param clientToken
     *        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency
     *        ensures that an API request completes only once. With an idempotent request, if the original request
     *        completes successfully, subsequent retries with the same client token return the result from the original
     *        successful request. </p>
     *        <p>
     *        If you do not specify a client token, one is automatically generated by the AWS SDK.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateIdentityProviderRequest withClientToken(String clientToken) {
        setClientToken(clientToken);
        return this;
    }

    /**
     * <p>
     * The ARN of the identity provider.
     * </p>
     * 
     * @param identityProviderArn
     *        The ARN of the identity provider.
     */

    public void setIdentityProviderArn(String identityProviderArn) {
        this.identityProviderArn = identityProviderArn;
    }

    /**
     * <p>
     * The ARN of the identity provider.
     * </p>
     * 
     * @return The ARN of the identity provider.
     */

    public String getIdentityProviderArn() {
        return this.identityProviderArn;
    }

    /**
     * <p>
     * The ARN of the identity provider.
     * </p>
     * 
     * @param identityProviderArn
     *        The ARN of the identity provider.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateIdentityProviderRequest withIdentityProviderArn(String identityProviderArn) {
        setIdentityProviderArn(identityProviderArn);
        return this;
    }

    /**
     * <p>
     * The details of the identity provider.
     * </p>
     * 
     * @return The details of the identity provider.
     */

    public java.util.Map<String, String> getIdentityProviderDetails() {
        return identityProviderDetails;
    }

    /**
     * <p>
     * The details of the identity provider.
     * </p>
     * 
     * @param identityProviderDetails
     *        The details of the identity provider.
     */

    public void setIdentityProviderDetails(java.util.Map<String, String> identityProviderDetails) {
        this.identityProviderDetails = identityProviderDetails;
    }

    /**
     * <p>
     * The details of the identity provider.
     * </p>
     * 
     * @param identityProviderDetails
     *        The details of the identity provider.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateIdentityProviderRequest withIdentityProviderDetails(java.util.Map<String, String> identityProviderDetails) {
        setIdentityProviderDetails(identityProviderDetails);
        return this;
    }

    /**
     * Add a single IdentityProviderDetails entry
     *
     * @see UpdateIdentityProviderRequest#withIdentityProviderDetails
     * @returns a reference to this object so that method calls can be chained together.
     */

    public UpdateIdentityProviderRequest addIdentityProviderDetailsEntry(String key, String value) {
        if (null == this.identityProviderDetails) {
            this.identityProviderDetails = new java.util.HashMap<String, String>();
        }
        if (this.identityProviderDetails.containsKey(key))
            throw new IllegalArgumentException("Duplicated keys (" + key.toString() + ") are provided.");
        this.identityProviderDetails.put(key, value);
        return this;
    }

    /**
     * Removes all the entries added into IdentityProviderDetails.
     *
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateIdentityProviderRequest clearIdentityProviderDetailsEntries() {
        this.identityProviderDetails = null;
        return this;
    }

    /**
     * <p>
     * The name of the identity provider.
     * </p>
     * 
     * @param identityProviderName
     *        The name of the identity provider.
     */

    public void setIdentityProviderName(String identityProviderName) {
        this.identityProviderName = identityProviderName;
    }

    /**
     * <p>
     * The name of the identity provider.
     * </p>
     * 
     * @return The name of the identity provider.
     */

    public String getIdentityProviderName() {
        return this.identityProviderName;
    }

    /**
     * <p>
     * The name of the identity provider.
     * </p>
     * 
     * @param identityProviderName
     *        The name of the identity provider.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateIdentityProviderRequest withIdentityProviderName(String identityProviderName) {
        setIdentityProviderName(identityProviderName);
        return this;
    }

    /**
     * <p>
     * The type of the identity provider.
     * </p>
     * 
     * @param identityProviderType
     *        The type of the identity provider.
     * @see IdentityProviderType
     */

    public void setIdentityProviderType(String identityProviderType) {
        this.identityProviderType = identityProviderType;
    }

    /**
     * <p>
     * The type of the identity provider.
     * </p>
     * 
     * @return The type of the identity provider.
     * @see IdentityProviderType
     */

    public String getIdentityProviderType() {
        return this.identityProviderType;
    }

    /**
     * <p>
     * The type of the identity provider.
     * </p>
     * 
     * @param identityProviderType
     *        The type of the identity provider.
     * @return Returns a reference to this object so that method calls can be chained together.
     * @see IdentityProviderType
     */

    public UpdateIdentityProviderRequest withIdentityProviderType(String identityProviderType) {
        setIdentityProviderType(identityProviderType);
        return this;
    }

    /**
     * <p>
     * The type of the identity provider.
     * </p>
     * 
     * @param identityProviderType
     *        The type of the identity provider.
     * @return Returns a reference to this object so that method calls can be chained together.
     * @see IdentityProviderType
     */

    public UpdateIdentityProviderRequest withIdentityProviderType(IdentityProviderType identityProviderType) {
        this.identityProviderType = identityProviderType.toString();
        return this;
    }

    /**
     * Returns a string representation of this object. This is useful for testing and debugging. Sensitive data will be
     * redacted from this string using a placeholder value.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getClientToken() != null)
            sb.append("ClientToken: ").append(getClientToken()).append(",");
        if (getIdentityProviderArn() != null)
            sb.append("IdentityProviderArn: ").append(getIdentityProviderArn()).append(",");
        if (getIdentityProviderDetails() != null)
            sb.append("IdentityProviderDetails: ").append(getIdentityProviderDetails()).append(",");
        if (getIdentityProviderName() != null)
            sb.append("IdentityProviderName: ").append(getIdentityProviderName()).append(",");
        if (getIdentityProviderType() != null)
            sb.append("IdentityProviderType: ").append(getIdentityProviderType());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof UpdateIdentityProviderRequest == false)
            return false;
        UpdateIdentityProviderRequest other = (UpdateIdentityProviderRequest) obj;
        if (other.getClientToken() == null ^ this.getClientToken() == null)
            return false;
        if (other.getClientToken() != null && other.getClientToken().equals(this.getClientToken()) == false)
            return false;
        if (other.getIdentityProviderArn() == null ^ this.getIdentityProviderArn() == null)
            return false;
        if (other.getIdentityProviderArn() != null && other.getIdentityProviderArn().equals(this.getIdentityProviderArn()) == false)
            return false;
        if (other.getIdentityProviderDetails() == null ^ this.getIdentityProviderDetails() == null)
            return false;
        if (other.getIdentityProviderDetails() != null && other.getIdentityProviderDetails().equals(this.getIdentityProviderDetails()) == false)
            return false;
        if (other.getIdentityProviderName() == null ^ this.getIdentityProviderName() == null)
            return false;
        if (other.getIdentityProviderName() != null && other.getIdentityProviderName().equals(this.getIdentityProviderName()) == false)
            return false;
        if (other.getIdentityProviderType() == null ^ this.getIdentityProviderType() == null)
            return false;
        if (other.getIdentityProviderType() != null && other.getIdentityProviderType().equals(this.getIdentityProviderType()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getClientToken() == null) ? 0 : getClientToken().hashCode());
        hashCode = prime * hashCode + ((getIdentityProviderArn() == null) ? 0 : getIdentityProviderArn().hashCode());
        hashCode = prime * hashCode + ((getIdentityProviderDetails() == null) ? 0 : getIdentityProviderDetails().hashCode());
        hashCode = prime * hashCode + ((getIdentityProviderName() == null) ? 0 : getIdentityProviderName().hashCode());
        hashCode = prime * hashCode + ((getIdentityProviderType() == null) ? 0 : getIdentityProviderType().hashCode());
        return hashCode;
    }

    @Override
    public UpdateIdentityProviderRequest clone() {
        return (UpdateIdentityProviderRequest) super.clone();
    }

}
